{
  "name": "Dev Journey: Birth of a New Old System",
  "pages": [
    {
      "name": "Introduction",
      "type": "text",
      "_id": "Gfr6fmdT1vzqv9vl",
      "title": {
        "show": true,
        "level": 1
      },
      "image": {},
      "text": {
        "format": 2,
        "content": "<p>This journal is my attempt to document the process I am using and my experience in using it in creating a system for FUDGE in FoundryVTT.</p>\n<p>FUDGE isn't really one system, but it is the foundational engine behind the <em>Gatecrasher</em> and <em>Terra Incognita</em> games from <em>Grey Ghost Games</em> and the <em>Now Playing</em> and <em>The Unexplained</em> games from <em>Carnivore Games</em>. It has also been used by many gamemasters over the years to experiment with some of their own ideas. It is the predecessor to FATE Core and I'm sure it has influenced engines like Powered by the Apocolypse and has the same freewheeling spirit as games like City of Mist.</p>\n<h2 id=\"whymeandwhyfudge\">Why me? And why FUDGE?</h2>\n<p>One of the beauties of a really raw FUDGE implementation is that you can immediately start playing with relatively little prep and absolutely nothing to look up. It needs no \"session zero\" and is really useful when you're going to be stuck in a bus station with a deck of blank index cards and some other bored people for a while. </p>\n<p>I have used it to GM pick-up games with little more guidance than \"You're living in ancient Egypt - only to you, this is the New Kingdom, not at all like that old one and its stodgy ways. Somebody you know in Thebes has gotten killed and you want to find out who did it. Who are you, what do you do with your life, and why do you care?\" I named a handful of common attributes and picked a few attribute levels and key skills out of the air from what they told me. Ready to rock. I think it took all of 15 minutes to get five people out of the gate. </p>\n<p>I hope that, when the initial work is complete, Ann Dupuis and Brad Younie, of Grey Ghost Press and Carnivore Games, respectively, are happy with what this produces, and that game masters and players find it useful.</p>\n<h2 id=\"whythisjournal\">Why this journal?</h2>\n<p>In Discord, I periodically hear potential system writers being frustrated with the lack of tutorial material on writing new systems. The API docs are pretty comprehensive, but to use them, you need to know what you're looking at and how the pieces fit together. I am hoping that my own experiences provide some benefit to others who are ready to \"scratch their itch\" to build a system for the games they love. </p>\n<p>I don't intend this to be a deep dive into specific code for specific situations. Many of the answers to those questions are already in the API documentation. Instead, I envision this as a journal of the process of creating a real system and the discoveries made along the way. By taking this approach, I hope that this will provide the critical context, the \"mental glue\", missing from some of the system documentation.</p>\n<h2 id=\"wherearewegoing\">Where are we going?</h2>\n<p>Every project benefits from starting with a really narrow goal and following that goal from one end to the other, then branching out to achieve further goals. Taking this approach, you always have something to show for your effort. </p>\n<p>Our initial goal here is to make a system that lets us display a FUDGE character and edit its levels. Combat mechanics will be the second goal, but we won't worry about that until the first is completed. Then we can get into supplying skills, etc. for the character.</p>\n<p>With that in mind, I chose to perform this exercise just for the main FUDGE character sheet. Here's the game plan for the steps that follow:</p>\n<ul>\n<li><p>First, I create the raw sheet as a prototype and learn everything I can from it. Oddly, the most tedious parts of creating the prototype are the ones I'm likely to learn to most from.</p></li>\n<li><p>Then, I create a FudgeCharacter and populate the template.json with what we learned about the data from making the HTML.</p></li>\n<li><p>Following that, I build a template from the existing sheet and what we will, by then, know the data is called.</p></li>\n<li><p>I can then export an empty character and populate it to create an initial character for import.</p></li>\n<li><p>Then I can make a FudgeSheet application that populates and displays the template from the actor.</p></li>\n<li><p>Finally, I can write event handlers for the sheet that update the actor data.</p></li>\n</ul>\n<p>At the end of this exercise, we should have a functioning character sheet that could be referenced in a game. </p>\n<p>With that satisfaction, I may write further journals on further adventures. I should definitely write one about combat mechanics. Creating items will likely be more of the same, so perhaps I won't chronicle it, but I will definitely write about adding items to characters. </p>\n<h2 id=\"september102020\">September 10, 2020</h2>\n<p>I am writing this introduction at the very beginning of this journey so that I can describe it as it happens. Yesterday, I set up the directories in which this system will live and a few of the files that need to be there, and this morning I wrote the initial HTML mockup of a stock FUDGE character sheet. The next couple of pages will cover these steps, and from there, we will be on our way.</p>",
        "markdown": "This journal is my attempt to document the process I am using and my experience in using it in creating a system for FUDGE in FoundryVTT.\n\nFUDGE isn't really one system, but it is the foundational engine behind the *Gatecrasher* and *Terra Incognita* games from _Grey Ghost Games_ and the *Now Playing* and *The Unexplained* games from _Carnivore Games_. It has also been used by many gamemasters over the years to experiment with some of their own ideas. It is the predecessor to FATE Core and I'm sure it has influenced engines like Powered by the Apocolypse and has the same freewheeling spirit as games like City of Mist.\n\n## Why me? And why FUDGE?\n\nOne of the beauties of a really raw FUDGE implementation is that you can immediately start playing with relatively little prep and absolutely nothing to look up. It needs no \"session zero\" and is really useful when you're going to be stuck in a bus station with a deck of blank index cards and some other bored people for a while. \n\nI have used it to GM pick-up games with little more guidance than \"You're living in ancient Egypt - only to you, this is the New Kingdom, not at all like that old one and its stodgy ways. Somebody you know in Thebes has gotten killed and you want to find out who did it. Who are you, what do you do with your life, and why do you care?\" I named a handful of common attributes and picked a few attribute levels and key skills out of the air from what they told me. Ready to rock. I think it took all of 15 minutes to get five people out of the gate. \n\nI hope that, when the initial work is complete, Ann Dupuis and Brad Younie, of Grey Ghost Press and Carnivore Games, respectively, are happy with what this produces, and that game masters and players find it useful.\n\n## Why this journal?\n\nIn Discord, I periodically hear potential system writers being frustrated with the lack of tutorial material on writing new systems. The API docs are pretty comprehensive, but to use them, you need to know what you're looking at and how the pieces fit together. I am hoping that my own experiences provide some benefit to others who are ready to \"scratch their itch\" to build a system for the games they love. \n\nI don't intend this to be a deep dive into specific code for specific situations. Many of the answers to those questions are already in the API documentation. Instead, I envision this as a journal of the process of creating a real system and the discoveries made along the way. By taking this approach, I hope that this will provide the critical context, the \"mental glue\", missing from some of the system documentation.\n\n## Where are we going?\n\nEvery project benefits from starting with a really narrow goal and following that goal from one end to the other, then branching out to achieve further goals. Taking this approach, you always have something to show for your effort. \n\nOur initial goal here is to make a system that lets us display a FUDGE character and edit its levels. Combat mechanics will be the second goal, but we won't worry about that until the first is completed. Then we can get into supplying skills, etc. for the character.\n\nWith that in mind, I chose to perform this exercise just for the main FUDGE character sheet. Here's the game plan for the steps that follow:\n\n- First, I create the raw sheet as a prototype and learn everything I can from it. Oddly, the most tedious parts of creating the prototype are the ones I'm likely to learn to most from.\n\n- Then, I create a FudgeCharacter and populate the template.json with what we learned about the data from making the HTML.\n\n- Following that, I build a template from the existing sheet and what we will, by then, know the data is called.\n\n- I can then export an empty character and populate it to create an initial character for import.\n\n- Then I can make a FudgeSheet application that populates and displays the template from the actor.\n\n- Finally, I can write event handlers for the sheet that update the actor data.\n\nAt the end of this exercise, we should have a functioning character sheet that could be referenced in a game. \n\nWith that satisfaction, I may write further journals on further adventures. I should definitely write one about combat mechanics. Creating items will likely be more of the same, so perhaps I won't chronicle it, but I will definitely write about adding items to characters. \n\n## September 10, 2020\n\nI am writing this introduction at the very beginning of this journey so that I can describe it as it happens. Yesterday, I set up the directories in which this system will live and a few of the files that need to be there, and this morning I wrote the initial HTML mockup of a stock FUDGE character sheet. The next couple of pages will cover these steps, and from there, we will be on our way."
      },
      "video": {
        "controls": true,
        "volume": 0.5
      },
      "src": null,
      "system": {},
      "sort": 100000,
      "ownership": {
        "default": -1
      },
      "flags": {}
    },
    {
      "name": "September 9, 2020: A Place To Live",
      "type": "text",
      "_id": "d84w9XjgHDrYo4is",
      "title": {
        "show": true,
        "level": 1
      },
      "image": {},
      "text": {
        "format": 2,
        "content": "<p>To build a Foundry system, it needs a place to live, so you start with a directory somewhere on your system. You may eventually want to place all this in a source control system - perhaps on GitHub or some similar environment - for others to share, but for now, a directory will do.</p>\n<p>Note that a lot of the information on this page and the next couple is also covered in a <a href=\"https://foundryvtt.com/article/system-development/\" title=\"Introduction to System Development\">KnowledgeBase article</a> on the Foundry VTT site. I am describing what I have done for the FUDGE system, so you can follow along.</p>\n<h2 id=\"directorytree\">Directory Tree</h2>\n<p>Based on the article and work done on other systems, here's the scheme I decided to proceed with:</p>\n<div style=\"background-color:#444444;color:#BBBBBB\"><pre><code>/fudge-vtt\n  /build\n  /lang\n    en.json\n  /module\n    /applications\n    /documents\n    fudge.mjs\n  /packs\n    /src\n  /styles\n    fudge.css\n  /templates\nsystem.json\ntemplate.json\n.eslintrc.json\npackage.json\n</code></pre>\n</div>\n<p>Here are the big pieces:</p>\n<ul>\n<li><p>/module: All your JavaScript ES6 code lives in here with a .mjs extension. We start with an empty fudge.mjs</p></li>\n<li><p>/module/documents: You will need to make your own document classes that inherit from things like actors and items. </p></li>\n<li><p>/module/applications: You will need to make your own application classes for the sheets that let the user see and edit the data in the system. (Things like the character sheet and the item sheets for the skills and equipment that you drag onto your actor are all called <em>applications</em> - I have no idea why.)</p>\n<p>We can always make more subtrees later if we discover other closely related clusters of code and we can put other code in the top level /module area.</p></li>\n<li><p>/css: Your CSS lives in this tree with a .css extension. We start with an empty fudge.css</p>\n<p>For now, I'm going to try to live without a CSS pre-processor or post-processor like <code>less</code> or <code>scss</code>. It could get wordy and nested or I could end up doing really flat CSS if I can get away with it. We'll see how that goes.</p></li>\n<li><p>/templates - Your HTML templates live in here with a .hbs extension. </p>\n<p>The templates are handlebars that let you easily inject all your bits and pieces of actual data into html, so they mostly look like HTML, except for things injected in curly braces like <code>{whatever}</code>.</p></li>\n<li><p>/lang - This is where your translations live. Any user-visible string should be named in here and this data should be used instead of putting raw user-visible text in your modules or templates.</p></li>\n<li><p>/packs - Your compendia live here, but they are compiled from information found in /packs/src</p></li>\n<li><p>/build - Any real-world system will probably need its source processed in some kind of way before it is ready to zip for deployment. Compendia need to be brought together from source. Your system will load faster if it is a single module. The JavaScript code to drive this, running in node, will live in this directory.</p></li>\n</ul>\n<h2 id=\"systemconfigurationfiles\">System Configuration Files</h2>\n<p>Knowing just this much, we can wrangle together the basics of a <code>system.json</code>, but it won't be complete:</p>\n<div style=\"background-color:#444444;color:#BBBBBB\"><pre><code>{\n    \"id\": \"fudge\",\n    \"title\": \"FUDGE\",\n    \"description\": \"Foundry support for games based on the Freeform Universal Do-It-Yourself Gaming Engine (FUDGE).\",\n    \"version\": \"1.0.0\",\n    \"compatibility\": {\n      \"minimum\": \"10\",\n      \"verified\": \"10\",\n      \"maximum\": \"10\"\n    },\n    \"authors\": [\n      {\n        \"name\": \"lupestro\",\n        \"url\": \"https://www.lupestro.net\",\n        \"email\": \"lupestro@macksoft.com\",\n        \"discord\": \"@lupestro#2211\"\n      }\n    ],\n    \"esmodules\": [\n      \"module/fudge.mjs\"\n    ],\n    \"styles\": [\n      \"styles/fudge.css\"\n    ],\n    \"packs\": [\n    ],\n    \"languages\": [\n      {\n        \"lang\": \"en\",\n        \"name\": \"English\",\n        \"path\": \"lang/en.json\"\n      }\n    ],\n    \"url\": \"https://github.com/lupestro/fvtt-fudge/\",\n    \"manifest\": \"https://github.com/lupestro/fvtt-fudge/system.json\",\n    \"download\": \"https://github.com/lupestro/fvtt-fudge/fudge.zip\"\n  }\n</code></pre>\n</div>\n<p>We can't yet include any of the following data, because we haven't actually designed enough to fill them in:</p>\n<div style=\"background-color:#444444;color:#BBBBBB\"><pre><code>    \"packs\": [\n      {\n        \"name\": \"faults\",\n        \"label\": \"Faults\",\n        \"path\": \"packs/faults.db\",\n        \"type\": \"Item\"\n      }\n    ],\n\n    \"socket\": false,\n    \"initiative\": \"4df\",\n    \"gridDistance\": 3,\n    \"gridUnits\": \"ft\",\n</code></pre>\n</div>\n<p>If <code>system.json</code> is a little spotty, <code>template.json</code> is a total loss at this point. We know we will have one or more kinds of actors and one or more kinds of items, but we have no idea what kind of data goes in any of them, so the following will have to do until we find out what we need:</p>\n<div style=\"background-color:#444444;color:#BBBBBB\"><pre><code>{\n  \"Actor\": {\n    \"types\": [],\n    \"templates\": {},\n  },\n  \"Item\": {\n    \"types\": [],\n    \"templates\": {},\n  }\n}\n</code></pre>\n</div>\n<h2 id=\"wranglingabuildsystem\">Wrangling a Build System</h2>\n<p>While you can write a single script to pull all this together, you will get a lot more mileage if you are able to use tools out in the node ecosystem. This means you need to have NodeJS installed. As of September 2022, v14 is okay to use and v16 is better. The best version to use will change roughly every year or so. </p>\n<p>npm, supplied with node, manages the ecosystem of third-party node modules. The package.json comes from doing a \"npm init\" in your project directory. It will ask you to enter a bunch of information and will set up your project with it. You can change it all later by editing the <code>package.json</code> that it creates.</p>\n<p>From there, doing \"npm install -D {package-name}<code>will install a third-party package into a subtree of</code>node_modules`. </p>\n<ul>\n<li><p>gulp is one of several tools that makes it easy to write JavaScript code for orchestrating all your build steps in Node.</p></li>\n<li><p>eslint checks your code for practices you might want to avoid. There is a lot of JavaScript that is syntactically valid but not healthy for a long.-term project, and eslint helps point these things out.</p></li>\n<li><p>jsdoc is very useful for providing documentation from comments in your code.</p></li>\n</ul>\n<p><code>gulp</code> performs the build. The gulpfile.mjs in the project directory defines the commands you can use from gulp. I adapted the gulpfile.mjs and the code it calls in /build from the build files used by the dnd5e system, trimming away what I knew we weren't going to use. However, this code carried with it the need to install a bundch of other npm packages:</p>\n<div style=\"background-color:#444444;color:#BBBBBB\"><pre><code>@babel/core\n@babel/eslint-parser\nesling-plugin-jsdoc\ngulp-eslint7\ngulp-if\nrollup\n@rollup/plugin-node-resolve\nmerge-stream\nnedb\npath\nyargs\n</code></pre>\n</div>\n<p>Working with npm is always a little like the lady who swallowed a fly - and then swallowed a spider to catch the fly. (If you know the song, we won't proceed as far as the horse.) However, the result of all this is that we can do all the complicated stuff with a couple of \"brain-dead simple\" commands we can even get right late into the evening:</p>\n<ul>\n<li><p><code>npm run build</code> to compile the JavaScript code down to a single mjs module and package up all the packs.</p></li>\n<li><p><code>npm run lint</code> to perform all the lint checks</p></li>\n</ul>\n<p>At some point, we could even add an equally simple command to create the zipped module for us.</p>\n<p>I've boosted this up for faster builds by using npm to install a package called <code>pnpm</code>, an enhanced replacement for npm, so you may see me doing <code>pnpm build</code> or <code>pnpm lint</code>. It does the same thing.</p>\n<p>Yay! A reliable build mechanism. Now we're all set to build our empty fudge.mjs, with an empty fudge.css, and an empty templates directory - oh, dear. It appears we're all dressed up with no place to go. Hum.</p>\n<p>So let's make a character sheet - no Foundry required - yet.</p>\n<h2 id=\"bonussupportingmultiplefoundryvttreleases\">Bonus: Supporting Multiple FoundryVTT Releases</h2>\n<p>One benefit of having NodeJS installed is that you can use it to set up local Foundry servers for test, running various different versions of the code. The following structure has worked well for me for over a year now:</p>\n<div style=\"background-color:#444444;color:#BBBBBB\"><pre><code>FoundryTest\n  /FoundryVTT-{version}\n  /Data\n    /FoundryVTT-{version}\n      /data\n</code></pre>\n</div>\n<ul>\n<li>Start with the packages you need for test installed in the build you are using in your usual Foundry tree.</li>\n<li>Unzip the FoundryVTT Linux/Node package for the build (say it is 9.251) in the <code>FoundryTest</code> directory. so that it forms a <code>FoundryVTT-9.251</code> subdirectory under <code>/FoundryTest</code>.</li>\n<li>Create a corresponding <code>FoundryTest/Data/FoundryVTT=9.251</code> directory. </li>\n<li>Copy the <code>data</code> subtree from your usual Foundry tree to <code>FoundryTest\\Data\\FoundryVTT-9.251\\data</code>.</li>\n<li>With your current working directory in FoundryTest, the following command will invoke whichever Foundry version you want to run:</li>\n</ul>\n<div style=\"background-color:#444444;color:#BBBBBB\"><pre><code>node ./FoundryVTT-{version}/resources/app/main.js --dataPath=\"./Data/FoundryVTT-{version}/data\"`\n</code></pre>\n</div>\n<ul>\n<li>I recommend wrapping it in a shell-script that just lets you substitute the version.</li>\n<li>As new versions of Foundry are released from the one you are using, you can just install the new package under its version in the tree and copy the whole /Data/FoundryVTT-{version} directory to a new directory under the same parent and rename it to the new version. When you start FoundryVTT using that version, the data in the new directory will be upgraded to the new version.</li>\n</ul>\n<p>One useful trick is to symbolically link the system directory in FoundryVTT to the place where you are doing the development. (I usually keep my GIT clones in the same tree.)</p>\n<div style=\"background-color:#444444;color:#BBBBBB\"><pre><code>ln -s /Users/me/Code/Foundry/fvtt-fudge /Users/me/FoundryModTest/Data/foundryvtt-10.285/Data/systems/fudge\n</code></pre>\n</div>\n<p>When I copy the directory trees containing this for a new FoundryVTT version, the link will be carried over and point to the same place. If you are dealing with different code bases for different versions, you can also keep a clone for each and link appropriately, so you can keep things as simple or as fancy as you need.</p>\n<p>Then I can fire up whichever one I want to run. I usually set up major versions to run on different ports so that, when code is supporting multiple major FoundryVTT versions, I can compare code execution. It makes juggling releases relatively painless.</p>\n<p>I didn't just cook this up today, of course. I've been using it for the past year supporting the Torch module from 0.7.10 onward, so it's pretty well flight tested by now.</p>",
        "markdown": "To build a Foundry system, it needs a place to live, so you start with a directory somewhere on your system. You may eventually want to place all this in a source control system - perhaps on GitHub or some similar environment - for others to share, but for now, a directory will do.\n\nNote that a lot of the information on this page and the next couple is also covered in a [KnowledgeBase article](<https://foundryvtt.com/article/system-development/> \"Introduction to System Development\") on the Foundry VTT site. I am describing what I have done for the FUDGE system, so you can follow along.\n\n## Directory Tree\n\nBased on the article and work done on other systems, here's the scheme I decided to proceed with:\n\n<div style=\"background-color:#444444; color: #BBBBBB\">\n```\n/fudge-vtt\n  /build\n  /lang\n    en.json\n  /module\n    /applications\n    /documents\n    fudge.mjs\n  /packs\n    /src\n  /styles\n    fudge.css\n  /templates\nsystem.json\ntemplate.json\n.eslintrc.json\npackage.json\n```\n</div>\n\nHere are the big pieces:\n\n- /module: All your JavaScript ES6 code lives in here with a .mjs extension. We start with an empty fudge.mjs\n\n- /module/documents: You will need to make your own document classes that inherit from things like actors and items. \n\n- /module/applications: You will need to make your own application classes for the sheets that let the user see and edit the data in the system. (Things like the character sheet and the item sheets for the skills and equipment that you drag onto your actor are all called *applications* - I have no idea why.)\n  \n  We can always make more subtrees later if we discover other closely related clusters of code and we can put other code in the top level /module area.\n\n- /css: Your CSS lives in this tree with a .css extension. We start with an empty fudge.css\n\n  For now, I'm going to try to live without a CSS pre-processor or post-processor like `less` or `scss`. It could get wordy and nested or I could end up doing really flat CSS if I can get away with it. We'll see how that goes.\n\n- /templates - Your HTML templates live in here with a .hbs extension. \n\n  The templates are handlebars that let you easily inject all your bits and pieces of actual data into html, so they mostly look like HTML, except for things injected in curly braces like `{whatever}`.\n\n- /lang - This is where your translations live. Any user-visible string should be named in here and this data should be used instead of putting raw user-visible text in your modules or templates.\n\n- /packs - Your compendia live here, but they are compiled from information found in /packs/src\n\n- /build - Any real-world system will probably need its source processed in some kind of way before it is ready to zip for deployment. Compendia need to be brought together from source. Your system will load faster if it is a single module. The JavaScript code to drive this, running in node, will live in this directory.\n\n## System Configuration Files\n\nKnowing just this much, we can wrangle together the basics of a `system.json`, but it won't be complete:\n\n<div style=\"background-color:#444444; color: #BBBBBB\">\n```\n{\n    \"id\": \"fudge\",\n    \"title\": \"FUDGE\",\n    \"description\": \"Foundry support for games based on the Freeform Universal Do-It-Yourself Gaming Engine (FUDGE).\",\n    \"version\": \"1.0.0\",\n    \"compatibility\": {\n      \"minimum\": \"10\",\n      \"verified\": \"10\",\n      \"maximum\": \"10\"\n    },\n    \"authors\": [\n      {\n        \"name\": \"lupestro\",\n        \"url\": \"https://www.lupestro.net\",\n        \"email\": \"lupestro@macksoft.com\",\n        \"discord\": \"@lupestro#2211\"\n      }\n    ],\n    \"esmodules\": [\n      \"module/fudge.mjs\"\n    ],\n    \"styles\": [\n      \"styles/fudge.css\"\n    ],\n    \"packs\": [\n    ],\n    \"languages\": [\n      {\n        \"lang\": \"en\",\n        \"name\": \"English\",\n        \"path\": \"lang/en.json\"\n      }\n    ],\n    \"url\": \"https://github.com/lupestro/fvtt-fudge/\",\n    \"manifest\": \"https://github.com/lupestro/fvtt-fudge/system.json\",\n    \"download\": \"https://github.com/lupestro/fvtt-fudge/fudge.zip\"\n  }\n\n```\n</div>\n\nWe can't yet include any of the following data, because we haven't actually designed enough to fill them in:\n\n<div style=\"background-color:#444444; color: #BBBBBB\">\n```\n    \"packs\": [\n      {\n        \"name\": \"faults\",\n        \"label\": \"Faults\",\n        \"path\": \"packs/faults.db\",\n        \"type\": \"Item\"\n      }\n    ],\n\n    \"socket\": false,\n    \"initiative\": \"4df\",\n    \"gridDistance\": 3,\n    \"gridUnits\": \"ft\",\n```\n</div>\n\nIf `system.json` is a little spotty, `template.json` is a total loss at this point. We know we will have one or more kinds of actors and one or more kinds of items, but we have no idea what kind of data goes in any of them, so the following will have to do until we find out what we need:\n\n<div style=\"background-color:#444444; color: #BBBBBB\">\n```\n{\n  \"Actor\": {\n    \"types\": [],\n    \"templates\": {},\n  },\n  \"Item\": {\n    \"types\": [],\n    \"templates\": {},\n  }\n}\n```\n</div>\n\n## Wrangling a Build System\n\n\nWhile you can write a single script to pull all this together, you will get a lot more mileage if you are able to use tools out in the node ecosystem. This means you need to have NodeJS installed. As of September 2022, v14 is okay to use and v16 is better. The best version to use will change roughly every year or so. \n\nnpm, supplied with node, manages the ecosystem of third-party node modules. The package.json comes from doing a \"npm init\" in your project directory. It will ask you to enter a bunch of information and will set up your project with it. You can change it all later by editing the `package.json` that it creates.\n\nFrom there, doing \"npm install -D {package-name}` will install a third-party package into a subtree of `node_modules`. \n\n- gulp is one of several tools that makes it easy to write JavaScript code for orchestrating all your build steps in Node.\n\n- eslint checks your code for practices you might want to avoid. There is a lot of JavaScript that is syntactically valid but not healthy for a long.-term project, and eslint helps point these things out.\n\n- jsdoc is very useful for providing documentation from comments in your code.\n\n`gulp` performs the build. The gulpfile.mjs in the project directory defines the commands you can use from gulp. I adapted the gulpfile.mjs and the code it calls in /build from the build files used by the dnd5e system, trimming away what I knew we weren't going to use. However, this code carried with it the need to install a bundch of other npm packages:\n\n<div style=\"background-color:#444444; color: #BBBBBB\">\n```\n@babel/core\n@babel/eslint-parser\nesling-plugin-jsdoc\ngulp-eslint7\ngulp-if\nrollup\n@rollup/plugin-node-resolve\nmerge-stream\nnedb\npath\nyargs\n```\n</div>\n\nWorking with npm is always a little like the lady who swallowed a fly - and then swallowed a spider to catch the fly. (If you know the song, we won't proceed as far as the horse.) However, the result of all this is that we can do all the complicated stuff with a couple of \"brain-dead simple\" commands we can even get right late into the evening:\n\n- `npm run build` to compile the JavaScript code down to a single mjs module and package up all the packs.\n\n- `npm run lint` to perform all the lint checks\n\nAt some point, we could even add an equally simple command to create the zipped module for us.\n\nI've boosted this up for faster builds by using npm to install a package called `pnpm`, an enhanced replacement for npm, so you may see me doing `pnpm build` or `pnpm lint`. It does the same thing.\n\nYay! A reliable build mechanism. Now we're all set to build our empty fudge.mjs, with an empty fudge.css, and an empty templates directory - oh, dear. It appears we're all dressed up with no place to go. Hum.\n\nSo let's make a character sheet - no Foundry required - yet.\n\n## Bonus: Supporting Multiple FoundryVTT Releases\n\nOne benefit of having NodeJS installed is that you can use it to set up local Foundry servers for test, running various different versions of the code. The following structure has worked well for me for over a year now:\n<div style=\"background-color:#444444; color: #BBBBBB\">\n```\nFoundryTest\n  /FoundryVTT-{version}\n  /Data\n    /FoundryVTT-{version}\n      /data\n```\n</div>\n\n* Start with the packages you need for test installed in the build you are using in your usual Foundry tree.\n* Unzip the FoundryVTT Linux/Node package for the build (say it is 9.251) in the `FoundryTest` directory. so that it forms a `FoundryVTT-9.251` subdirectory under `/FoundryTest`.\n* Create a corresponding `FoundryTest/Data/FoundryVTT=9.251` directory. \n* Copy the `data` subtree from your usual Foundry tree to `FoundryTest\\Data\\FoundryVTT-9.251\\data`.\n* With your current working directory in FoundryTest, the following command will invoke whichever Foundry version you want to run:\n<div style=\"background-color:#444444; color: #BBBBBB\">\n```\nnode ./FoundryVTT-{version}/resources/app/main.js --dataPath=\"./Data/FoundryVTT-{version}/data\"`\n```\n</div>\n* I recommend wrapping it in a shell-script that just lets you substitute the version.\n* As new versions of Foundry are released from the one you are using, you can just install the new package under its version in the tree and copy the whole /Data/FoundryVTT-{version} directory to a new directory under the same parent and rename it to the new version. When you start FoundryVTT using that version, the data in the new directory will be upgraded to the new version.\n\nOne useful trick is to symbolically link the system directory in FoundryVTT to the place where you are doing the development. (I usually keep my GIT clones in the same tree.)\n\n<div style=\"background-color:#444444; color: #BBBBBB\">\n```\nln -s /Users/me/Code/Foundry/fvtt-fudge /Users/me/FoundryModTest/Data/foundryvtt-10.285/Data/systems/fudge\n```\n</div>\n\nWhen I copy the directory trees containing this for a new FoundryVTT version, the link will be carried over and point to the same place. If you are dealing with different code bases for different versions, you can also keep a clone for each and link appropriately, so you can keep things as simple or as fancy as you need.\n\nThen I can fire up whichever one I want to run. I usually set up major versions to run on different ports so that, when code is supporting multiple major FoundryVTT versions, I can compare code execution. It makes juggling releases relatively painless.\n\nI didn't just cook this up today, of course. I've been using it for the past year supporting the Torch module from 0.7.10 onward, so it's pretty well flight tested by now."
      },
      "video": {
        "controls": true,
        "volume": 0.5
      },
      "src": null,
      "system": {},
      "sort": 200000,
      "ownership": {
        "default": -1
      },
      "flags": {
        "core": {
          "sheetClass": "core.MarkdownJournalPageSheet"
        }
      }
    },
    {
      "name": "Doctrine: The Roles of HTML, CSS, and Script",
      "type": "text",
      "_id": "hM4CDP7UvFFOpPy4",
      "title": {
        "show": true,
        "level": 1
      },
      "image": {},
      "text": {
        "format": 1,
        "content": "<p>The next step in the journey won't require Foundry. You just need a text editor with two windows - one for sheet.html and one for sheet.css - and a browser to view the results.</p><h2>The big three - HTML CSS, and JavaScript (or TypeScript)</h2><p>HTML is a funny beast. It's been with us for over 20 years, and it's magic! But people often try to either dumb it down or avoid using more of it than they have to.</p><p>CSS is also magic! Its chief shortcoming is that it is global, but people go out of their way to try to avoid using it as well.</p><p>JavaScript is big magic! And people who are most comfortable coding make the mistake of trying to use it for everything and sideline as much of the HTML and CSS as they can.</p><p>Over the years, I've become very opinionated about this stuff, but I think the opinions are good ones. (Of course, I would, right?) Each of the three are very good for what they do, and we should use each of them primarily for their primary purpose. So this is the section where I get to rant a little and dump my opinions on a page.</p><p>So here's a good way to think about them.</p><h3>HTML</h3><p>HTML is for structured content. <em>Both those words matter.</em></p><p>HTML specifies the document structure. There are a bunch of tags now in HTML that let you directly specify the structure of the document. Use a header tag for the stuff at the top, the main tag for the central piece, and the footer tag for that bit at the bottom. Use sections for major portions of all three - well, you probably won't have sections in your footer. Use aside for sidebar content. You get the idea.</p><p>In a character sheet, which is typically a form, it can be confusing to know how to apply this principle. But even a form has regions and sections. The most important thing in forms is to use the right element for the right purpose. People put a lot of good work into HTML to ensure consistent and appropriate behavior for input elements of specific types. A lot of those behaviors are things you will never think about, but they're important, and they're built-in. So use them! Do not use DIVs for inputs and backfill behavior with JavaScript and aria attributes.</p><ul><li><p>Do you click on it to do something? It should be a button.</p></li><li><p>Do you type text into it? It should be an edit or textarea input.</p></li><li><p>Do you click on something to go somewhere else? Use an anchor element.</p></li><li><p>Are you choosing whether to do something? Use a checkbox input for it.</p></li><li><p>Are you selecting from a choice of things to use, where you want the choices to catch the user's eye? Use a group of radio buttons.</p></li><li><p>Are you selecting from a choice of things to use, where it's okay to only disclose them if someone is interested? Use a select element with options.</p></li></ul><p>Even if you don't want something to look the way the browser typically presents the inputs, you can usually restyle that with CSS. You can make an anchor look like a button or vice versa. The HTML should deliver what the input does as content, and CSS will deal with how it looks.</p><p>Deliver the HTML in the order of the flow of the content, rather than the visual order on the screen. These may differ when you have things like sidebars. While keeping all user-readable text in translation files, don't do things like burying text content in pictures. Keep all the content either in the HTML or in translations referenced from the HTML. (The translations will end up in the final HTML.)</p><p>If you follow the flow of content, one side-effect you will get is that you should find you can tab your way from one control to the next very smoothly. You may have a couple of places where you</p><p>HTML is not for dynamics or styling.</p><p>HTML has all kinds of tags that predated modern CSS available to provide horizontal breaks, non-breaking spaces, or make text bold or italic, etc. In the past, tables have been used to do major layout. Don't use a table unless you're building an honest-to-god table. Use CSS classes and the CSS style files to do <em>all</em> your styling. For more on that, read the next subsection.</p><p>If you make a page purely in HTML and CSS, you will have a static page. It will have no dynamic behavior and its structure won't change. It is really good to start with a static HTML page because then you can enumerate all the dynamics you wish it had. Those dynamics will be the focus of your work in JavaScript for that page. (And if the visual transitions and conditions like focus and hover can be handled in CSS alone, do it. If something's going to break on your page, it will be in the JavaScript. Limit your surface area for bugs.)</p><p>However, even without any CSS or JavaScript, the real test of an HTML page is. \"Okay, it's ugly as sin, but can I enter data into it and can I see all the content on all the devices I've got? Can I tab my way through the whole thing in an unsurprising order?\" If that's true, you've got the HTML part down.</p><h3>CSS</h3><p>CSS is where you make your HTML no longer be ugly as sin. CSS is where you define how your page looks.</p><p>There's a lot to CSS. Some people find it intimidating because of that. But there's a lot you can do with it, If you make full use of flex and grid for layout and avoid float except where it actually applies, you can dodge a lot of the really arcane sorts of bugs we used to pound our heads on our desks over in the past.</p><p>The big thing to learn about with CSS is specificity. A more specific rule overrides a less specific rule. If you make a rule for all \"p\" elements and then make a rule for \".myclass p\" that sets different values for the same properties, the latter rule will dominate on paragraphs that appear under the element with class \"myclass\" because it is more specific. It won't even show up for other paragraphs. \"a &gt; b\" is more specific than \"a b\", and an id is more specific than a class, which is more specific than an element type.</p><p>If you make your CSS really complex, you can bury yourself in the way the specificity rules get applied. If you keep your CSS relatively simple, you can usually get away with few and simpler rules and you can use those rules to make your layout more consistent.</p><p>For instance, if you often have a label followed by a field, if you use the same classes for the label and the field wherever you use that combination, you can guarantee a consistent presentation of that combination wherever it is used, and you don't have to specify all the parents it is used under. Mentally, when you look at a character sheet, look for these common pieces and leverage them.</p><p>When you have created your character sheet in HTML and styled it in CSS, you should have something you can be proud to print. You should never need JavaScript to see your page.</p><h3>JavaScript (and TypeScript)</h3><p>If our pages never did anything and never offered the opportunity for us to do anything, they would be pretty but not particularly engaging, like the marketing copy on the fledgling web of the early 90's.</p><p>Script is about doing something when the user interacts with the page. It should <em>only</em> be about doing something when the user interacts with the UI, setup when part of the UI is first created, and teardown when part of the UI goes away. So most all the JavaScript you write will be initially invoked when \"something happens elsewhere\", typically when an event occurs or on a hook. You may write JavaScript that is several layers away from that initiating event and isn't even aware which of several events initiated it, but that is always where it starts.</p><p>The introduction of frameworks led to JavaScript-based controls that injected HTML into the page, typically using div elements, with event handlers to pretend to be whatever kind of control they were emulating, and with additional behavior. For a variety of reasons, accessibility being one among many others, it is better not to use these controls, but to use Javascript that handles the events of the elements actually designated in HTML to perform those behaviors. It requires a lot less JavaScript, is likely to have a lot fewer bugs, and the behavior will be more consistent with the rest of the web in a thousand ways you never thought about.</p><p>Okay - enough soap box. With all of this in mind, let's get back to our basic character sheet.</p><p></p>",
        "markdown": ""
      },
      "video": {
        "controls": true,
        "volume": 0.5
      },
      "src": null,
      "system": {},
      "sort": 300000,
      "ownership": {
        "default": -1
      },
      "flags": {}
    },
    {
      "name": "September 10, 2022: HTML Character Sheet",
      "type": "text",
      "_id": "7zSc1Yf76NKwuyur",
      "title": {
        "show": true,
        "level": 1
      },
      "image": {},
      "text": {
        "format": 2,
        "content": "<p>So, now that we have the empty superstructure in place, the next step is to create a static character sheet, filled in with the specific attributes, skills, gifts, faults, equipment, etc. for a particular character. The sheet should be a snapshot of what you want the actual sheet for that specific character to look like when it is rendered via FoundryVTT.</p>\n<h2 id=\"whydothis\">Why do this?</h2>\n<p>There are things you can find out by going through the effort of laying up a whole sheet by hand that you can discover early almost no other way.</p>\n<ul>\n<li><p>It lets you see what the repeating structures will look like by actually doing the repetition in the browser.</p></li>\n<li><p>You can see how the content and styling for attributes and skills, for instance, are the same, and how they differ.</p></li>\n<li><p>You can see how lists of simple things like gifts and faults differ from attributes and skills, which have levels.</p></li>\n<li><p>You can discover how very similar grid structures can be used for each of these lists. By seeing all the styles in common between them, because you just did them over and over again, you can see how to combine general styles across the whole page with very narrow specializations to make cleaner CSS.</p></li>\n<li><p>You can see and debug just about all of the CSS before writing one line of JavaScript code.</p></li>\n<li><p>You can see all the places where information from the individual character appears in the sheet. This in turn will tell you what most of your character data is.</p></li>\n<li><p>This HTML becomes the basis for the corresponding template.</p></li>\n</ul>\n<p>You get so much from this exercise and you didn't have to learn a single thing about Foundry, just about a character in your game and how it renders into HTML. You know. The real stuff.</p>\n<h2 id=\"basicboilerplate\">Basic boilerplate</h2>\n<p>You will need some basic boilerplate for the sheet to start from. A character sheet is basically a form, so:</p>\n<div style=\"background-color:#444444;color:#BBBBBB\"><pre><code>&lt;html lang=\"en-us\"&gt;\n&lt;head&gt;\n    &lt;title&gt;FUDGE Character&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"../styles/fudge.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form class=\"actor\"&gt;\n    . . .\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n</div>\n<p>Everything we really care about will happen inside this.</p>\n<h2 id=\"visuallywhatwewanttosee\">Visually what we want to see</h2>\n<p><img src=\"modules/dev-journeys/assets/FudgeCharacter.png\" title=\"Character Sheet\" /></p>\n<h2 id=\"whatdidifindandwhere\">What did I find and where?</h2>\n<h3 id=\"superstructure\">Superstructure</h3>\n<p>The superstructure can usually be identified by all the colorful element names that identify the role of the sections in the document. It may reflect what the sheet looks like overall.</p>\n<div style=\"background-color:#444444;color:#BBBBBB\"><pre><code class=\"html language-html\">        &lt;header&gt;\n            &lt;h1 class=\"title\"&gt;FUDGE Character Sheet&lt;/h1&gt;\n            &lt;section class=\"names\"&gt;\n            &lt;/section&gt;\n            &lt;section class=\"basedata\"&gt;\n            &lt;/section&gt;\n        &lt;/header&gt;\n        &lt;main&gt;\n            &lt;section class=\"traits\"&gt;\n               &lt;section class=\"attributes\"&gt;\n                &lt;/section&gt;\n                &lt;section class=\"gifts\"&gt;\n                &lt;/section&gt;\n                &lt;section class=\"skills\"&gt;\n                &lt;/section&gt;\n                &lt;section class=\"equipment\"&gt;\n                &lt;/section&gt;\n                &lt;section class=\"faults\"&gt;\n                &lt;/section&gt;\n            &lt;/section&gt;\n        &lt;/main&gt;\n        &lt;footer&gt;\n        &lt;/footer&gt;\n</code></pre>\n</div>\n<p>Looking at the superstructure, the arrangement is pretty clear. I made a few choices. The big chunk at the top with overall stats ends up in <code>&lt;header&gt;</code>, while all the traits end up in <code>&lt;main&gt;</code>. </p>\n<p>It is possible that, in another page organization, for a busier system, the different kinds of traits might end up each in their own tab, but the stuff at the top is clearly summary stuff that we want to always be able to see. </p>\n<p>Putting it in <code>&lt;header&gt;</code> seemed right, but we can easily revisit it later if we need to.</p>\n<p>We already find one very important thing working at this level. It's clear I'll need to send an email to Ann Dupuis at Grey Ghost Press about licensing the character sheet structure for use in FoundryVTT. That will need to go in my to-do list.</p>\n<h3 id=\"majorrepeatingstructures\">Major Repeating Structures</h3>\n<p>Every block in the character sheet with a border has repeating structures. However, under <code>basedata</code> the Fudge Trait values is just a simple table, so it's not very interesting. Wounds are a bit interesting:</p>\n<div style=\"background-color:#444444;color:#BBBBBB\"><pre><code class=\"html language-html\">                &lt;div class=\"wounds\"&gt;\n                    &lt;h2&gt; Wounds&lt;/h2&gt;\n                    &lt;div class=\"woundlevels\"&gt;\n                        &lt;div class=\"level\"&gt;\n                            &lt;div&gt;1-2&lt;/div&gt;\n                            &lt;div class=\"checks\"&gt;\n                                &lt;input type=\"checkbox\"&gt;\n                                &lt;input type=\"checkbox\"&gt;\n                                &lt;input type=\"checkbox\"&gt;\n                            &lt;/div&gt;\n                            &lt;div&gt;Scratch&lt;/div&gt;\n                        &lt;/div&gt;\n                        &lt;div class=\"level\"&gt;\n                            &lt;div&gt;3-4&lt;/div&gt;\n                            &lt;div class=\"checks\"&gt;\n                                &lt;input type=\"checkbox\"&gt;\n                            &lt;/div&gt;\n                            &lt;div&gt;Hurt (-1)&lt;/div&gt;\n                        &lt;/div&gt;\n                        &lt;div class=\"level\"&gt;\n                            &lt;div&gt;5-6&lt;/div&gt;\n                            &lt;div class=\"checks\"&gt;\n                                &lt;input type=\"checkbox\"&gt;\n                            &lt;/div&gt;\n                            &lt;div&gt;Very Hurt (-2)&lt;/div&gt;\n                        &lt;/div&gt;\n                        &lt;div class=\"level\"&gt;\n                            &lt;div&gt;7-8&lt;/div&gt;\n                            &lt;div class=\"checks\"&gt;\n                                &lt;input type=\"checkbox\"&gt;\n                            &lt;/div&gt;\n                            &lt;div&gt;Incapacitated&lt;/div&gt;\n\n                        &lt;/div&gt;\n                        &lt;div class=\"level\"&gt;\n                            &lt;div&gt;9+&lt;/div&gt;\n                            &lt;div class=\"checks\"&gt;\n                                &lt;input type=\"checkbox\"&gt;\n                            &lt;/div&gt;\n                            &lt;div&gt;Near Death&lt;/div&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n</code></pre>\n</div>\n<p>The number of checkboxes at each wound level will be determined by a table based on attributes and perhaps gifs or faults. So a character robustness (whatever stat is used for that in a particular game - this is FUDGE), might have four Scratch boxes and two Hurt boxes, while a character whose robustness is poor might have two Scratch boxes and one Hurt box. The character who is \"Hard To Kill\" might have three Incapacitated boxes, so that it takes more for lesser damage to overflow to Near Death.</p>\n<p>So we know that the only thing that will vary in this section based on configuration is the number of <code>&lt;input&gt;</code> items in each wound level, and the number of boxes that are checked.</p>\n<p>Moving on, the attributes have a repeating structure with levels:</p>\n<div style=\"background-color:#444444;color:#BBBBBB\"><pre><code class=\"html language-html\">                    &lt;h2&gt;Attributes&lt;/h2&gt;\n                    &lt;div class=\"levellist\"&gt;\n                        &lt;label for=\"a1\"&gt;Perception&lt;/label&gt;\n                        &lt;select id=\"a1\" name=\"perception\" data=\"Perception\"&gt;\n                            &lt;option value=\"3\"&gt;Superb&lt;/option&gt;\n                            &lt;option value=\"2\"&gt;Great&lt;/option&gt;\n                            &lt;option value=\"1\"&gt;Good&lt;/option&gt;\n                            &lt;option value=\"0\" selected&gt;Fair&lt;/option&gt;\n                            &lt;option value=\"-1\"&gt;Mediocre&lt;/option&gt;\n                            &lt;option value=\"-2\"&gt;Poor&lt;/option&gt;\n                            &lt;option value=\"-3\"&gt;Terrible&lt;/option&gt;\n                        &lt;/select&gt;\n                        &lt;label for=\"a2\"&gt;Reasoning&lt;/label&gt;\n                        &lt;select id=\"a2\" data=\"Reasoning\"&gt;\n                            &lt;option value=\"3\"&gt;Superb&lt;/option&gt;\n                            &lt;option value=\"2\"&gt;Great&lt;/option&gt;\n                            &lt;option value=\"1\"&gt;Good&lt;/option&gt;\n                            &lt;option value=\"0\" selected&gt;Fair&lt;/option&gt;\n                            &lt;option value=\"-1\"&gt;Mediocre&lt;/option&gt;\n                            &lt;option value=\"-2\"&gt;Poor&lt;/option&gt;\n                            &lt;option value=\"-3\"&gt;Terrible&lt;/option&gt;\n                        &lt;/select&gt;\n                        . . .\n                    &lt;/div&gt;\n</code></pre>\n</div>\n<p>This same structure turns out to be useful for skills, except we need to be able to edit and delete them, so:</p>\n<div style=\"background-color:#444444;color:#BBBBBB\"><pre><code class=\"html language-html\">                    &lt;h2&gt;Skills&lt;/h2&gt;\n                    &lt;div class=\"levellist levellist--dl\"&gt;\n                        &lt;label for=\"s1\"&gt;Swordsmanship&lt;/label&gt;\n                        &lt;select id=\"s1\" data=\"s1\"&gt;\n                            &lt;option value=\"3\"&gt;Superb&lt;/option&gt;\n                            &lt;option value=\"2\"&gt;Great&lt;/option&gt;\n                            &lt;option value=\"1\"&gt;Good&lt;/option&gt;\n                            &lt;option value=\"0\" selected&gt;Fair&lt;/option&gt;\n                            &lt;option value=\"-1\"&gt;Mediocre&lt;/option&gt;\n                            &lt;option value=\"-2\"&gt;Poor&lt;/option&gt;\n                            &lt;option value=\"-3\"&gt;Terrible&lt;/option&gt;\n                        &lt;/select&gt;\n                        &lt;button id=\"f1-x\" class=\"edit-button\" title=\"Edit\" type=\"button\"&gt;/&lt;/button&gt;\n                        &lt;button id=\"f1-x\" class=\"delete-button\" title=\"Delete\" type=\"button\"&gt;X&lt;/button&gt;\n                       &lt;label for=\"s2\"&gt;Diplomacy&lt;/label&gt;\n                        &lt;select id=\"s2\" data=\"s2\"&gt;\n                            &lt;option value=\"3\"&gt;Superb&lt;/option&gt;\n                            &lt;option value=\"2\"&gt;Great&lt;/option&gt;\n                            &lt;option value=\"1\"&gt;Good&lt;/option&gt;\n                            &lt;option value=\"0\" selected&gt;Fair&lt;/option&gt;\n                            &lt;option value=\"-1\"&gt;Mediocre&lt;/option&gt;\n                            &lt;option value=\"-2\"&gt;Poor&lt;/option&gt;\n                            &lt;option value=\"-3\"&gt;Terrible&lt;/option&gt;\n                        &lt;/select&gt;\n                        &lt;button id=\"f1-x\" class=\"edit-button\" title=\"Edit\" type=\"button\"&gt;/&lt;/button&gt;\n                        &lt;button id=\"f1-x\" class=\"delete-button\" title=\"Delete\" type=\"button\"&gt;X&lt;/button&gt;\n                    &lt;/div&gt;\n</code></pre>\n</div>\n<p>Due to the wonders of CSS grid layout, the same basic layout can be used for both.</p>\n<div style=\"background-color:#444444;color:#BBBBBB\"><pre><code class=\"css language-css\">.levellist {\n    display: grid;\n    grid-auto-rows: auto;\n    grid-template-columns: auto 1fr;\n    align-items: center;\n    gap: 5px;\n}\n.levellist.levellist--dl {\n    grid-template-columns: auto 1fr 20px 20px;\n}\n.levellist.levellist--dl button {\n    width:  15px;\n    height: 15px;\n}\n\n.levellist label {\n    padding: 5px;\n}\n</code></pre>\n</div>\n<p>For both attributes and skills, the level selection is a piece of character data. For skills, the list of what skills the character has is also character data. In practice, skills, gifts, faults, and equipment will all be items that are dragged onto an actor, so they'll be in the embedded items list.</p>\n<p>Gifts and Faults use a repeating pattern:</p>\n<div style=\"background-color:#444444;color:#BBBBBB\"><pre><code>                    &lt;h2&gt;Gifts/Powers&lt;/h2&gt;\n                    &lt;div class=\"traitlist\"&gt;\n                        &lt;div id=\"g1\" class=\"nonlevel-item\"&gt;Acute Hearing&lt;/div&gt;\n                        &lt;button type=\"button\" class=\"delete-button\" title=\"Delete\"&gt;X&lt;/button&gt;\n                        &lt;div id=\"g2\" class=\"nonlevel-item\"&gt;Golden Voice&lt;/div&gt;\n                        &lt;button type=\"button\" class=\"delete-button\" title=\"Delete\"&gt;X&lt;/button&gt;\n                    &lt;/div&gt;\n</code></pre>\n</div>\n<p>Those inner divs could perhaps be done better as as spans. I started out with simply a <code>&lt;ul&gt;</code> with <code>&lt;li&gt;</code> for the items, but it then turned out that they each needed a delete button, so I went with a grid layout instead.</p>\n<p>Even so, the only interesting data about these is which ones the user has. We're back to the embedded item list.</p>\n<p>The structure of equipment was unique:</p>\n<div style=\"background-color:#444444;color:#BBBBBB\"><pre><code>                   &lt;h2&gt;Equipment&lt;/h2&gt;\n                    &lt;div class=\"eqlist\"&gt;\n                        &lt;div class=\"eqtitle\"&gt;Item&lt;/div&gt;\n                        &lt;div class=\"eqtitle\"&gt;DF&lt;/div&gt;\n                        &lt;div class=\"eqtitle\"&gt;&lt;/div&gt;\n                        &lt;div class=\"eqname\"&gt;Fountain Pen&lt;/div&gt;\n                        &lt;div class=\"df\"&gt;&lt;/div&gt;\n                        &lt;button id=\"f1-x\" class=\"delete-button\" title=\"Delete\" type=\"button\"&gt;X&lt;/button&gt;\n                        &lt;div class=\"eqname\"&gt;Short Sword&lt;/div&gt;\n                        &lt;div class=\"df\"&gt;O+2&lt;/div&gt;\n                        &lt;button id=\"f1-x\" class=\"delete-button\" title=\"Delete\" type=\"button\"&gt;X&lt;/button&gt;\n                        &lt;div class=\"eqname\"&gt;Leather Jacket&lt;/div&gt;\n                        &lt;div class=\"df\"&gt;D+1&lt;/div&gt;\n                        &lt;button id=\"f1-x\" class=\"delete-button\" title=\"Delete\" type=\"button\"&gt;X&lt;/button&gt;\n                    &lt;/div&gt;\n               &lt;/section&gt;\n</code></pre>\n</div>\n<p>However, we again chose to use a grid for it, as we did for all the others:</p>\n<div style=\"background-color:#444444;color:#BBBBBB\"><pre><code class=\"css language-css\">.eqlist {\n    display: grid;\n    grid: auto 2;\n    grid-template-columns: 1fr auto 20px;\n    gap: 5px;\n    padding: 5px;\n}\n.eqlist .eqtitle {\n    font-weight: bold;\n}\n</code></pre>\n</div>\n<p>For equipment, the character either has it or doesn't, but the definition of the item will need to involve offensive (for weapon) or defensive (for armor) damage factors (DF) and quantity for consumable gear.</p>\n<p>Using grids for all of these suggests there might be a repeating CSS structure in there, but I haven't yet figured out the best way to take advantage of that, finding common structures to pull out and generalize. Perhaps I will with more study.</p>\n<h3 id=\"minorrepeatingstructures\">Minor Repeating Structures</h3>\n<p>Hidden in all this, we have some smaller repeating structures. We have data entry fields with labels:</p>\n<div style=\"background-color:#444444;color:#BBBBBB\"><pre><code class=\"html language-html\">&lt;label&gt;Character Name:\n    &lt;input name=\"charname\" id=\"charname\" type=\"text\" value=\"My Character\" placeholder=\"My Character\"/&gt;\n&lt;/label&gt;\n</code></pre>\n</div>\n<p>The text, name, id, value, and placeholder will all vary from one use to another, but the structure will be the same.</p>\n<p>We can also give the <code>&lt;input&gt;</code> an id and use the <code>for</code> attribute on the label and make them peers, which is sometimes easier to deal with than nesting in grid and flex layouts.</p>\n<p>The level selector is another small repeating structure:</p>\n<div style=\"background-color:#444444;color:#BBBBBB\"><pre><code class=\"html language-html\">&lt;select id=\"s1\" data=\"s1\"&gt;\n    &lt;option value=\"3\"&gt;Superb&lt;/option&gt;\n    &lt;option value=\"2\"&gt;Great&lt;/option&gt;\n    &lt;option value=\"1\"&gt;Good&lt;/option&gt;\n    &lt;option value=\"0\" selected&gt;Fair&lt;/option&gt;\n    &lt;option value=\"-1\"&gt;Mediocre&lt;/option&gt;\n    &lt;option value=\"-2\"&gt;Poor&lt;/option&gt;\n    &lt;option value=\"-3\"&gt;Terrible&lt;/option&gt;\n&lt;/select&gt;\n</code></pre>\nSome games may pad the tree with Epic and Legendary levels above superb, but they would appear in all the level selectors on the page, so these are pure repeating structures. Only id and data attribute values are variable, but the set of levels in force would be a world-level structure affecting all actors. I'm not sure where that fits in the FoundryVTT data structure. Another one for the to-do list.\n\n</div>\n<p>So far so good.</p>",
        "markdown": "So, now that we have the empty superstructure in place, the next step is to create a static character sheet, filled in with the specific attributes, skills, gifts, faults, equipment, etc. for a particular character. The sheet should be a snapshot of what you want the actual sheet for that specific character to look like when it is rendered via FoundryVTT.\n\n## Why do this?\n\nThere are things you can find out by going through the effort of laying up a whole sheet by hand that you can discover early almost no other way.\n\n- It lets you see what the repeating structures will look like by actually doing the repetition in the browser.\n\n- You can see how the content and styling for attributes and skills, for instance, are the same, and how they differ.\n\n- You can see how lists of simple things like gifts and faults differ from attributes and skills, which have levels.\n\n- You can discover how very similar grid structures can be used for each of these lists. By seeing all the styles in common between them, because you just did them over and over again, you can see how to combine general styles across the whole page with very narrow specializations to make cleaner CSS.\n\n- You can see and debug just about all of the CSS before writing one line of JavaScript code.\n\n- You can see all the places where information from the individual character appears in the sheet. This in turn will tell you what most of your character data is.\n\n- This HTML becomes the basis for the corresponding template.\n\nYou get so much from this exercise and you didn't have to learn a single thing about Foundry, just about a character in your game and how it renders into HTML. You know. The real stuff.\n\n## Basic boilerplate\n\nYou will need some basic boilerplate for the sheet to start from. A character sheet is basically a form, so:\n<div style=\"background-color:#444444; color: #BBBBBB\">\n```\n<html lang=\"en-us\">\n<head>\n    <title>FUDGE Character</title>\n    <link rel=\"stylesheet\" href=\"../styles/fudge.css\">\n</head>\n<body>\n    <form class=\"actor\">\n    . . .\n    </form>\n</body>\n</html>\n```\n</div>\n\nEverything we really care about will happen inside this.\n\n## Visually what we want to see\n\n![Character Sheet Image](modules/dev-journeys/assets/FudgeCharacter.png \"Character Sheet\")\n\n## What did I find and where?\n\n### Superstructure\n\nThe superstructure can usually be identified by all the colorful element names that identify the role of the sections in the document. It may reflect what the sheet looks like overall.\n\n<div style=\"background-color:#444444; color: #BBBBBB\">\n```html\n        <header>\n            <h1 class=\"title\">FUDGE Character Sheet</h1>\n            <section class=\"names\">\n            </section>\n            <section class=\"basedata\">\n            </section>\n        </header>\n        <main>\n            <section class=\"traits\">\n               <section class=\"attributes\">\n                </section>\n                <section class=\"gifts\">\n                </section>\n                <section class=\"skills\">\n                </section>\n                <section class=\"equipment\">\n                </section>\n                <section class=\"faults\">\n                </section>\n            </section>\n        </main>\n        <footer>\n        </footer>\n```\n</div>\n\nLooking at the superstructure, the arrangement is pretty clear. I made a few choices. The big chunk at the top with overall stats ends up in `<header>`, while all the traits end up in `<main>`. \n\nIt is possible that, in another page organization, for a busier system, the different kinds of traits might end up each in their own tab, but the stuff at the top is clearly summary stuff that we want to always be able to see. \n\nPutting it in `<header>` seemed right, but we can easily revisit it later if we need to.\n\nWe already find one very important thing working at this level. It's clear I'll need to send an email to Ann Dupuis at Grey Ghost Press about licensing the character sheet structure for use in FoundryVTT. That will need to go in my to-do list.\n\n### Major Repeating Structures\n\nEvery block in the character sheet with a border has repeating structures. However, under `basedata` the Fudge Trait values is just a simple table, so it's not very interesting. Wounds are a bit interesting:\n\n<div style=\"background-color:#444444; color: #BBBBBB\">\n```html\n                <div class=\"wounds\">\n                    <h2> Wounds</h2>\n                    <div class=\"woundlevels\">\n                        <div class=\"level\">\n                            <div>1-2</div>\n                            <div class=\"checks\">\n                                <input type=\"checkbox\">\n                                <input type=\"checkbox\">\n                                <input type=\"checkbox\">\n                            </div>\n                            <div>Scratch</div>\n                        </div>\n                        <div class=\"level\">\n                            <div>3-4</div>\n                            <div class=\"checks\">\n                                <input type=\"checkbox\">\n                            </div>\n                            <div>Hurt (-1)</div>\n                        </div>\n                        <div class=\"level\">\n                            <div>5-6</div>\n                            <div class=\"checks\">\n                                <input type=\"checkbox\">\n                            </div>\n                            <div>Very Hurt (-2)</div>\n                        </div>\n                        <div class=\"level\">\n                            <div>7-8</div>\n                            <div class=\"checks\">\n                                <input type=\"checkbox\">\n                            </div>\n                            <div>Incapacitated</div>\n\n                        </div>\n                        <div class=\"level\">\n                            <div>9+</div>\n                            <div class=\"checks\">\n                                <input type=\"checkbox\">\n                            </div>\n                            <div>Near Death</div>\n                        </div>\n                    </div>\n                </div>\n\n```\n</div>\nThe number of checkboxes at each wound level will be determined by a table based on attributes and perhaps gifs or faults. So a character robustness (whatever stat is used for that in a particular game - this is FUDGE), might have four Scratch boxes and two Hurt boxes, while a character whose robustness is poor might have two Scratch boxes and one Hurt box. The character who is \"Hard To Kill\" might have three Incapacitated boxes, so that it takes more for lesser damage to overflow to Near Death.\n\nSo we know that the only thing that will vary in this section based on configuration is the number of `<input>` items in each wound level, and the number of boxes that are checked.\n\nMoving on, the attributes have a repeating structure with levels:\n<div style=\"background-color:#444444; color: #BBBBBB\">\n```html\n                    <h2>Attributes</h2>\n                    <div class=\"levellist\">\n                        <label for=\"a1\">Perception</label>\n                        <select id=\"a1\" name=\"perception\" data=\"Perception\">\n                            <option value=\"3\">Superb</option>\n                            <option value=\"2\">Great</option>\n                            <option value=\"1\">Good</option>\n                            <option value=\"0\" selected>Fair</option>\n                            <option value=\"-1\">Mediocre</option>\n                            <option value=\"-2\">Poor</option>\n                            <option value=\"-3\">Terrible</option>\n                        </select>\n                        <label for=\"a2\">Reasoning</label>\n                        <select id=\"a2\" data=\"Reasoning\">\n                            <option value=\"3\">Superb</option>\n                            <option value=\"2\">Great</option>\n                            <option value=\"1\">Good</option>\n                            <option value=\"0\" selected>Fair</option>\n                            <option value=\"-1\">Mediocre</option>\n                            <option value=\"-2\">Poor</option>\n                            <option value=\"-3\">Terrible</option>\n                        </select>\n                        . . .\n                    </div>\n```\n</div>\nThis same structure turns out to be useful for skills, except we need to be able to edit and delete them, so:\n<div style=\"background-color:#444444; color: #BBBBBB\">\n```html\n                    <h2>Skills</h2>\n                    <div class=\"levellist levellist--dl\">\n                        <label for=\"s1\">Swordsmanship</label>\n                        <select id=\"s1\" data=\"s1\">\n                            <option value=\"3\">Superb</option>\n                            <option value=\"2\">Great</option>\n                            <option value=\"1\">Good</option>\n                            <option value=\"0\" selected>Fair</option>\n                            <option value=\"-1\">Mediocre</option>\n                            <option value=\"-2\">Poor</option>\n                            <option value=\"-3\">Terrible</option>\n                        </select>\n                        <button id=\"f1-x\" class=\"edit-button\" title=\"Edit\" type=\"button\">/</button>\n                        <button id=\"f1-x\" class=\"delete-button\" title=\"Delete\" type=\"button\">X</button>\n                       <label for=\"s2\">Diplomacy</label>\n                        <select id=\"s2\" data=\"s2\">\n                            <option value=\"3\">Superb</option>\n                            <option value=\"2\">Great</option>\n                            <option value=\"1\">Good</option>\n                            <option value=\"0\" selected>Fair</option>\n                            <option value=\"-1\">Mediocre</option>\n                            <option value=\"-2\">Poor</option>\n                            <option value=\"-3\">Terrible</option>\n                        </select>\n                        <button id=\"f1-x\" class=\"edit-button\" title=\"Edit\" type=\"button\">/</button>\n                        <button id=\"f1-x\" class=\"delete-button\" title=\"Delete\" type=\"button\">X</button>\n                    </div>\n```\n</div>\nDue to the wonders of CSS grid layout, the same basic layout can be used for both.\n\n<div style=\"background-color:#444444; color: #BBBBBB\">\n```css\n.levellist {\n    display: grid;\n    grid-auto-rows: auto;\n    grid-template-columns: auto 1fr;\n    align-items: center;\n    gap: 5px;\n}\n.levellist.levellist--dl {\n    grid-template-columns: auto 1fr 20px 20px;\n}\n.levellist.levellist--dl button {\n    width:  15px;\n    height: 15px;\n}\n\n.levellist label {\n    padding: 5px;\n}\n```\n</div>\n\nFor both attributes and skills, the level selection is a piece of character data. For skills, the list of what skills the character has is also character data. In practice, skills, gifts, faults, and equipment will all be items that are dragged onto an actor, so they'll be in the embedded items list.\n\nGifts and Faults use a repeating pattern:\n\n<div style=\"background-color:#444444; color: #BBBBBB\">\n```\n                    <h2>Gifts/Powers</h2>\n                    <div class=\"traitlist\">\n                        <div id=\"g1\" class=\"nonlevel-item\">Acute Hearing</div>\n                        <button type=\"button\" class=\"delete-button\" title=\"Delete\">X</button>\n                        <div id=\"g2\" class=\"nonlevel-item\">Golden Voice</div>\n                        <button type=\"button\" class=\"delete-button\" title=\"Delete\">X</button>\n                    </div>\n```\n</div>\nThose inner divs could perhaps be done better as as spans. I started out with simply a `<ul>` with `<li>` for the items, but it then turned out that they each needed a delete button, so I went with a grid layout instead.\n\nEven so, the only interesting data about these is which ones the user has. We're back to the embedded item list.\n\nThe structure of equipment was unique:\n\n<div style=\"background-color:#444444; color: #BBBBBB\">\n```\n                   <h2>Equipment</h2>\n                    <div class=\"eqlist\">\n                        <div class=\"eqtitle\">Item</div>\n                        <div class=\"eqtitle\">DF</div>\n                        <div class=\"eqtitle\"></div>\n                        <div class=\"eqname\">Fountain Pen</div>\n                        <div class=\"df\"></div>\n                        <button id=\"f1-x\" class=\"delete-button\" title=\"Delete\" type=\"button\">X</button>\n                        <div class=\"eqname\">Short Sword</div>\n                        <div class=\"df\">O+2</div>\n                        <button id=\"f1-x\" class=\"delete-button\" title=\"Delete\" type=\"button\">X</button>\n                        <div class=\"eqname\">Leather Jacket</div>\n                        <div class=\"df\">D+1</div>\n                        <button id=\"f1-x\" class=\"delete-button\" title=\"Delete\" type=\"button\">X</button>\n                    </div>\n               </section>\n```\n</div>\n\nHowever, we again chose to use a grid for it, as we did for all the others:\n\n<div style=\"background-color:#444444; color: #BBBBBB\">\n```css\n.eqlist {\n    display: grid;\n    grid: auto 2;\n    grid-template-columns: 1fr auto 20px;\n    gap: 5px;\n    padding: 5px;\n}\n.eqlist .eqtitle {\n    font-weight: bold;\n}\n```\n</div>\n\nFor equipment, the character either has it or doesn't, but the definition of the item will need to involve offensive (for weapon) or defensive (for armor) damage factors (DF) and quantity for consumable gear.\n\nUsing grids for all of these suggests there might be a repeating CSS structure in there, but I haven't yet figured out the best way to take advantage of that, finding common structures to pull out and generalize. Perhaps I will with more study.\n\n  \n### Minor Repeating Structures\n\nHidden in all this, we have some smaller repeating structures. We have data entry fields with labels:\n\n<div style=\"background-color:#444444; color: #BBBBBB\">\n```html\n<label>Character Name:\n    <input name=\"charname\" id=\"charname\" type=\"text\" value=\"My Character\" placeholder=\"My Character\"/>\n</label>\n\n```\n</div>\nThe text, name, id, value, and placeholder will all vary from one use to another, but the structure will be the same.\n\nWe can also give the `<input>` an id and use the `for` attribute on the label and make them peers, which is sometimes easier to deal with than nesting in grid and flex layouts.\n\nThe level selector is another small repeating structure:\n\n<div style=\"background-color:#444444; color: #BBBBBB\">\n```html\n<select id=\"s1\" data=\"s1\">\n    <option value=\"3\">Superb</option>\n    <option value=\"2\">Great</option>\n    <option value=\"1\">Good</option>\n    <option value=\"0\" selected>Fair</option>\n    <option value=\"-1\">Mediocre</option>\n    <option value=\"-2\">Poor</option>\n    <option value=\"-3\">Terrible</option>\n</select>\n\n```\nSome games may pad the tree with Epic and Legendary levels above superb, but they would appear in all the level selectors on the page, so these are pure repeating structures. Only id and data attribute values are variable, but the set of levels in force would be a world-level structure affecting all actors. I'm not sure where that fits in the FoundryVTT data structure. Another one for the to-do list.\n\n</div>\n\nSo far so good."
      },
      "video": {
        "controls": true,
        "volume": 0.5
      },
      "src": null,
      "system": {},
      "sort": 400000,
      "ownership": {
        "default": -1
      },
      "flags": {
        "core": {
          "sheetClass": "core.MarkdownJournalPageSheet"
        }
      }
    },
    {
      "name": "September 12, 2022: Config,  Actor, and Item Data",
      "type": "text",
      "_id": "UHnWwymPRlkGYiaA",
      "title": {
        "show": true,
        "level": 1
      },
      "image": {},
      "text": {
        "format": 2,
        "content": "<p>We can use the sheet as a lever to identify all the interesting data, but there is surprisingly little in base FUDGE.</p>\n<h2 id=\"systemconfiguration\">System configuration</h2>\n<p>A world will be using one dialect of FUDGE or another. The dialect will offer a limited or open-ended set of attributes, skills, gifts, faults, equipment, and its own rules about how various extension points of the base system. It may also use an alternate set of trait levels. The dialect will typically be provided as a module with compendia of the items it defines.</p>\n<p>The gamemaster can augment that with additional items for the individual game world or perhaps restrict some of the items. </p>\n<p>So probably the only piece of data that needs to be set up in system configuration, because it must be common across characters and items,  is the list of trait levels to use.</p>\n<p>The set of named wound levels could theoretically be configurable, but the set of buckets generally doesn't differ among systems, so it isn't worth planning for at this point.</p>\n<h2 id=\"actordata\">Actor data</h2>\n<p>Actors will typically be populated by dragging items from compendia onto them, and the character sheet will mostly be concerned with getting data for display from embedded items. However, there are a few pieces of data that belong to a character alone, rather than its items. These appear together in the header of the character sheet:</p>\n<ul>\n<li>Character name</li>\n<li>Player name</li>\n<li>Fudge points</li>\n<li>EPs </li>\n<li>The number of current wounds of various types.</li>\n</ul>\n<p>The character name will also be the actor name and the player name will be associated with the actor in the system, so arguably those don't have to be system-specific data. </p>\n<p>A player's level of a skill or attribute will live in the embedded item itself, not in the actor. The skill or attribute in the dialect's compendium will specify a default. When it is dragged onto a character, that character's copy will be editable, allowing players to set their characters' skill and attribute levels.</p>\n<p>For equipment, the offensive or defensive damage factors are preset for the gear supplied by the dialect, but even here, per-user overrides should be allowed rather than having the values \"baked in\" - maybe that player's broadsword turns out to be an artifact Broadsword of Brutality or something.</p>\n<p>We might also want to provide an ultra-light character type for cannon fodder that just has a combat skill, a weapon or two, some armor, and a couple wound levels but none of the other stuff.</p>\n<h2 id=\"itemdata\">Item data</h2>\n<p>We can also see something about vital item data. In base FUDGE:</p>\n<ul>\n<li>Skills and attributes are items that have a name and a level. </li>\n<li>Gifts and Faults are items that are barely more than a name with a description.</li>\n<li>Equipment has a few subtypes - weapons, armor, consumables, and other. </li>\n<li>Weapons have an offensive damage factor, armor has a defensive damage factor, and consumables have a quantity. Other equipment, like gifts and faults, are a named description.</li>\n</ul>\n<p>FUDGE dialects can extend this with additional properties to support things like paranormal powers. They can also introduce entirely new stats, like \"mana\", if that's the way they're representing magic.</p>\n<p>If we want to keep things really simple for the base game, we can simply say items have a DDF, an ODF, a quantity, and a type indicating which of those is applicable. That allows for hybrids that have both offensive and defensive value or consumable single-use weapons or armor. They will also benefit from an optional group to readily support 5-point FUDGE, for those game masters that use it during character creation.</p>\n<h2 id=\"entertemplatejson\">Enter <code>template.json</code>…</h2>\n<p>With this, we have enough data to build a template.json around, at least enough to start with.</p>\n<div style=\"background-color:#444444;color:#BBBBBB\"><pre><code>{\n    \"Actor\": {\n      \"types\": [\"major\",\"simple\"],\n      \"templates\": {\n        \"basic\": {\n          \"fp\": 0,\n          \"ep\": 0,\n          \"wounds\": {\n             \"scratch\": 0,\n             \"hurt\": 0,\n             \"veryhurt\": 0,\n             \"incapacitated\": 0,\n             \"neardeath\": 0\n           }\n        }\n      },\n      \"major\": {\n        \"templates\": [\"basic\"]\n      },\n      \"simple\": {\n        \"wounds\": {\n            \"ouch\": 0,\n            \"down\": 0\n        }\n      }\n    },\n    \"Item\": {\n      \"types\": [\"attribute\",\"skill\",\"gift\",\"fault\",\"equipment\"],\n      \"templates\": {\n        \"leveled\": {\n           \"level\": 0\n        } \n      },\n      \"attribute\": {\n        \"templates\": [\"leveled\"]\n      },\n      \"skill\": {\n        \"templates\": [\"leveled\"],\n        \"group\": \"General\"\n      },\n      \"gift\": {\n      },\n      \"fault\": {\n      },\n      \"equipment\": {\n        \"odf\": 0,\n        \"ddf\": 0,\n        \"quantity\":0\n      }\n    }\n}\n</code></pre>\n</div>\n<h2 id=\"andsystemjson\">… and <code>system.json</code></h2>\n<p>We also now know some of the kinds of predefined data we will need. We will need some sample attributes, skills, gifts, faults, and equipment. This lets us supply the packs for the system.json:</p>\n<div style=\"background-color:#444444;color:#BBBBBB\"><pre><code>    \"packs\": [\n      {\n        \"name\": \"attributes\",\n        \"label\": \"Attributes\",\n        \"path\": \"packs/attributes.db\",\n        \"type\": \"Item\"\n      },\n      {\n        \"name\": \"skills\",\n        \"label\": \"Skills\",\n        \"path\": \"packs/skills.db\",\n        \"type\": \"Item\"\n      },\n      {\n        \"name\": \"gifts\",\n        \"label\": \"Gifts\",\n        \"path\": \"packs/gifts.db\",\n        \"type\": \"Item\"\n      },\n      {\n        \"name\": \"faults\",\n        \"label\": \"Faults\",\n        \"path\": \"packs/faults.db\",\n        \"type\": \"Item\"\n      },\n      {\n        \"name\": \"equipment\",\n        \"label\": \"Equipment\",\n        \"path\": \"packs/equipment.db\",\n        \"type\": \"Item\"\n      }\n    ],\n</code></pre>\n</div>\n<p>Some of the remaining properties, like the units of movement, aren't really part of the system, while others like resources will depend a lot upon the dialect used. Fortunately, all those properties are optional.</p>\n<h2 id=\"firstfruits\">First Fruits</h2>\n<p>This system has no code, no CSS to speak of, nothing but those two json files. Take what you have already as <code>data/systems/fudge</code> and you will be able to see it among your systems. Use it to build a world, and you can see some of what we've done.</p>\n<p>First, go to the compendium packs, and you will see:</p>\n<p><img src=\"modules/dev-journeys/assets/CompendiumPacks.png\" title=\"Compendium Packs\" /></p>\n<p>Then, go to items, and create an item:</p>\n<p><img src=\"modules/dev-journeys/assets/primitive-create-item.png\" title=\"Create Item\" /></p>\n<p>The item it creates is very primitive, just a name - we haven't made any sheets or item objects specifically for our game yet - but it's already doing something.</p>\n<p><img src=\"modules/dev-journeys/assets/primitive-item.png\" title=\"Created Item\" /></p>\n<p>You can then create an actor. Again the actor is primitive because we haven't created any sheets for them.</p>\n<p><img src=\"modules/dev-journeys/assets/primitive-actor.png\" title=\"Created Actor\" /></p>\n<p>And you can then drag the item you created onto the actor and it will show up in its list of owned items. The presentation is primitive for now, but it means we can make a bunch of items and drop them on the character without writing any code for it. </p>\n<p>That's kind of exciting for no more actual work on the system than writing two JSON files.</p>\n<p>Here's another really useful thing. You can export those items:</p>\n<p><img src=\"modules/dev-journeys/assets/exported-item.png\" title=\"Exported Item\" /></p>\n<p>The \"system\" subtree of that JSON has all the properties we defined for the item. In this case, for an attribute, we only defined a level. </p>\n<p>However, if we set that level and import that item back into Foundry, we can drop it onto the actor and the actor will have the item with that value. </p>\n<p>Better yet, we can:</p>\n<ul>\n<li>attach all the named items of the right types to the actor without filling in any of their data but their names, </li>\n<li>export the actor as JSON </li>\n<li>edit the values of all the items attached to that character and</li>\n<li>import the actor from the JSON. </li>\n</ul>\n<p>This approach lets us populate all the item data for the actor without writing any code to edit items. The character sheet we write can then grab that data and display it in the page. We can go back and add the sheets on which to edit the items afterward.</p>\n<p>This will be our approach going forward. As for trait level data, we will hardcode it in an array for now. That array will eventually find its way into a system configuration property.</p>",
        "markdown": "We can use the sheet as a lever to identify all the interesting data, but there is surprisingly little in base FUDGE.\n\n## System configuration\n\nA world will be using one dialect of FUDGE or another. The dialect will offer a limited or open-ended set of attributes, skills, gifts, faults, equipment, and its own rules about how various extension points of the base system. It may also use an alternate set of trait levels. The dialect will typically be provided as a module with compendia of the items it defines.\n\nThe gamemaster can augment that with additional items for the individual game world or perhaps restrict some of the items. \n\nSo probably the only piece of data that needs to be set up in system configuration, because it must be common across characters and items,  is the list of trait levels to use.\n\nThe set of named wound levels could theoretically be configurable, but the set of buckets generally doesn't differ among systems, so it isn't worth planning for at this point.\n\n## Actor data\n\nActors will typically be populated by dragging items from compendia onto them, and the character sheet will mostly be concerned with getting data for display from embedded items. However, there are a few pieces of data that belong to a character alone, rather than its items. These appear together in the header of the character sheet:\n\n* Character name\n* Player name\n* Fudge points\n* EPs \n* The number of current wounds of various types.\n\nThe character name will also be the actor name and the player name will be associated with the actor in the system, so arguably those don't have to be system-specific data. \n\nA player's level of a skill or attribute will live in the embedded item itself, not in the actor. The skill or attribute in the dialect's compendium will specify a default. When it is dragged onto a character, that character's copy will be editable, allowing players to set their characters' skill and attribute levels.\n\nFor equipment, the offensive or defensive damage factors are preset for the gear supplied by the dialect, but even here, per-user overrides should be allowed rather than having the values \"baked in\" - maybe that player's broadsword turns out to be an artifact Broadsword of Brutality or something.\n\nWe might also want to provide an ultra-light character type for cannon fodder that just has a combat skill, a weapon or two, some armor, and a couple wound levels but none of the other stuff.\n\n## Item data\n\nWe can also see something about vital item data. In base FUDGE:\n\n* Skills and attributes are items that have a name and a level. \n* Gifts and Faults are items that are barely more than a name with a description.\n* Equipment has a few subtypes - weapons, armor, consumables, and other. \n* Weapons have an offensive damage factor, armor has a defensive damage factor, and consumables have a quantity. Other equipment, like gifts and faults, are a named description.\n\nFUDGE dialects can extend this with additional properties to support things like paranormal powers. They can also introduce entirely new stats, like \"mana\", if that's the way they're representing magic.\n\nIf we want to keep things really simple for the base game, we can simply say items have a DDF, an ODF, a quantity, and a type indicating which of those is applicable. That allows for hybrids that have both offensive and defensive value or consumable single-use weapons or armor. They will also benefit from an optional group to readily support 5-point FUDGE, for those game masters that use it during character creation.\n\n## Enter `template.json`...\n\nWith this, we have enough data to build a template.json around, at least enough to start with.\n\n<div style=\"background-color:#444444; color: #BBBBBB\">\n```\n{\n    \"Actor\": {\n      \"types\": [\"major\",\"simple\"],\n      \"templates\": {\n        \"basic\": {\n          \"fp\": 0,\n          \"ep\": 0,\n          \"wounds\": {\n             \"scratch\": 0,\n             \"hurt\": 0,\n             \"veryhurt\": 0,\n             \"incapacitated\": 0,\n             \"neardeath\": 0\n           }\n        }\n      },\n      \"major\": {\n        \"templates\": [\"basic\"]\n      },\n      \"simple\": {\n        \"wounds\": {\n            \"ouch\": 0,\n            \"down\": 0\n        }\n      }\n    },\n    \"Item\": {\n      \"types\": [\"attribute\",\"skill\",\"gift\",\"fault\",\"equipment\"],\n      \"templates\": {\n        \"leveled\": {\n           \"level\": 0\n        } \n      },\n      \"attribute\": {\n        \"templates\": [\"leveled\"]\n      },\n      \"skill\": {\n        \"templates\": [\"leveled\"],\n        \"group\": \"General\"\n      },\n      \"gift\": {\n      },\n      \"fault\": {\n      },\n      \"equipment\": {\n        \"odf\": 0,\n        \"ddf\": 0,\n        \"quantity\":0\n      }\n    }\n}\n```\n</div>\n\n## ... and `system.json`\n\n\nWe also now know some of the kinds of predefined data we will need. We will need some sample attributes, skills, gifts, faults, and equipment. This lets us supply the packs for the system.json:\n\n<div style=\"background-color:#444444; color: #BBBBBB\">\n```\n    \"packs\": [\n      {\n        \"name\": \"attributes\",\n        \"label\": \"Attributes\",\n        \"path\": \"packs/attributes.db\",\n        \"type\": \"Item\"\n      },\n      {\n        \"name\": \"skills\",\n        \"label\": \"Skills\",\n        \"path\": \"packs/skills.db\",\n        \"type\": \"Item\"\n      },\n      {\n        \"name\": \"gifts\",\n        \"label\": \"Gifts\",\n        \"path\": \"packs/gifts.db\",\n        \"type\": \"Item\"\n      },\n      {\n        \"name\": \"faults\",\n        \"label\": \"Faults\",\n        \"path\": \"packs/faults.db\",\n        \"type\": \"Item\"\n      },\n      {\n        \"name\": \"equipment\",\n        \"label\": \"Equipment\",\n        \"path\": \"packs/equipment.db\",\n        \"type\": \"Item\"\n      }\n    ],\n```\n</div>\n\nSome of the remaining properties, like the units of movement, aren't really part of the system, while others like resources will depend a lot upon the dialect used. Fortunately, all those properties are optional.\n\n## First Fruits\n\nThis system has no code, no CSS to speak of, nothing but those two json files. Take what you have already as `data/systems/fudge` and you will be able to see it among your systems. Use it to build a world, and you can see some of what we've done.\n\nFirst, go to the compendium packs, and you will see:\n\n![Compendium Packs](modules/dev-journeys/assets/CompendiumPacks.png \"Compendium Packs\")\n\nThen, go to items, and create an item:\n\n![Create Item](modules/dev-journeys/assets/primitive-create-item.png \"Create Item\")\n\nThe item it creates is very primitive, just a name - we haven't made any sheets or item objects specifically for our game yet - but it's already doing something.\n\n![Created Item](modules/dev-journeys/assets/primitive-item.png \"Created Item\")\n\nYou can then create an actor. Again the actor is primitive because we haven't created any sheets for them.\n\n![Created Actor](modules/dev-journeys/assets/primitive-actor.png \"Created Actor\")\n\nAnd you can then drag the item you created onto the actor and it will show up in its list of owned items. The presentation is primitive for now, but it means we can make a bunch of items and drop them on the character without writing any code for it. \n\nThat's kind of exciting for no more actual work on the system than writing two JSON files.\n\nHere's another really useful thing. You can export those items:\n\n![Exported Item](modules/dev-journeys/assets/exported-item.png \"Exported Item\")\n\nThe \"system\" subtree of that JSON has all the properties we defined for the item. In this case, for an attribute, we only defined a level. \n\nHowever, if we set that level and import that item back into Foundry, we can drop it onto the actor and the actor will have the item with that value. \n\nBetter yet, we can:\n* attach all the named items of the right types to the actor without filling in any of their data but their names, \n* export the actor as JSON \n* edit the values of all the items attached to that character and\n* import the actor from the JSON. \n\nThis approach lets us populate all the item data for the actor without writing any code to edit items. The character sheet we write can then grab that data and display it in the page. We can go back and add the sheets on which to edit the items afterward.\n\nThis will be our approach going forward. As for trait level data, we will hardcode it in an array for now. That array will eventually find its way into a system configuration property."
      },
      "video": {
        "controls": true,
        "volume": 0.5
      },
      "src": null,
      "system": {},
      "sort": 500000,
      "ownership": {
        "default": -1
      },
      "flags": {
        "core": {
          "sheetClass": "core.MarkdownJournalPageSheet"
        }
      }
    },
    {
      "name": "September 13, 2022:  Aim Before Firing",
      "type": "text",
      "_id": "30rz7yvG6Hjj7Ssr",
      "title": {
        "show": true,
        "level": 1
      },
      "image": {},
      "text": {
        "format": 2,
        "content": "<h2 id=\"makesureyoureright\">Make sure you're right…</h2>\n<p>Having slept on yesterday's ideas, it occurred to me: It's tedious to create each attribute, none of which has much more than a name, but I'd only do it once. It's even more tedious to drag each attribute across, one at a time, as items, every time I build a character. And attributes always travel in sets. So do trait levels. You never really choose them individually. Skills, gifts, faults, gear - these things are chosen one by one.</p>\n<p>So maybe we should consider making the <em>set</em> of attributes an item and declaring a rule that a character can only have a single set of attributes, that attribute sets are \"unique\" among a character's items.  This idea makes a lot of sense. The single property of an attribute set is a list of names.</p>\n<p>We could consider doing the same with trait level sets. Even if we select them in system configuration, having attribute sets as named items is a useful way of carrying them into the game. Until then, we could apply them per character in a single drag, which isn't bad. But we can hardcode the set and defer that question for now.</p>\n<h2 id=\"thengoahead\">…then go ahead.</h2>\n<p>It looks like we're ready to start. We can adjust our <code>template.json</code>, define an attribute set, two gifts, two faults, two skills, and one piece of equipment of each type (armor, weapon, consumable, other), and drag them onto an actor, and we'll have something to work with. Let's get started.</p>\n<p>First the <code>template.json</code>:</p>\n<div style=\"background-color:#444444;color:#BBBBBB\"><pre><code>  \"Item\": {\n    \"types\": [\"traitlevelset\", \"attributeset\",\"skill\",\"gift\",\"fault\",\"equipment\"],\n    \"templates\": {},\n    \"traitlevelset\": {\n      \"levels\": [\n        {\n          \"name\": \"\",\n          \"value\": 0,\n          \"ep\": 0\n        }\n      ]\n    },\n    \"attributeset\": {\n      \"attributes\": [\n        {\n          \"name\": \"\",\n          \"level\": 0\n        }\n      ]\n    },\n    \"skill\": {\n      \"level\": 0,\n      \"group\": \"General\"\n    },\n    \"gift\": {\n    },\n    \"fault\": {\n    },\n    \"equipment\": {\n      \"odf\": 0,\n      \"ddf\": 0,\n      \"quantity\":0\n    }\n  }\n</code></pre>\n</div>\n<p>I removed the attributes pack from the system.json and from the systen. We may have a pack of game system attribute and level sets in the future, or those may be delivered by modules.</p>\n<p>Restarting the server, I reopened the world to make sure it is happy with what we've done. Server log clean, so it loaded. Hmmm…. We get errors in the browser log on load about the two attribute items we created and the actor that used them. They don't show up in the UI, though, so we can't delete them.</p>\n<p>It's hard to delete what you can't see. It would have been smarter to delete them first before editing the <code>template.json</code>. We can try adding <code>attribute</code> back into the <code>template.json</code> and reload the world to clean those out.</p>\n<div style=\"background-color:#444444;color:#BBBBBB\"><pre><code>  \"Item\": {\n    \"types\": [\"attribute\", \"traitlevelset\", \"attributeset\",\"skill\",\"gift\",\"fault\",\"equipment\"],\n    \"templates\": {},\n    \"attribute\": {\n      \"level\": 0\n    },\n    . . .\n</code></pre>\n</div>\n<p>Okay, I had to restart the server, not just refresh the game, but that worked - mostly. I deleted the items before I removed them from the actors and removing them from the actors didn't work, so I removed the actors as well, since there was little enough in them. Now the game's all cleaned up, though, and I can update the <code>template.json</code> again to get rid of the <code>attribute</code> item for good.</p>\n<p>Now we can make some items that we'll actually keep. Let's set up our sample items and create an actor to hold them, so we'll have base sample data to work with. </p>\n<ul>\n<li>A standard set of trait levels and a set of attributes from Carnivore Games (Now Playing, The Unexplained) should do for those. </li>\n<li>A switchblade, a pocketful of pens, a leather jacket, and a lighter should do for gear. The blade and the jacket will have damage factors, and there will be a dozen pens. </li>\n<li>Street Fighting and Diplomacy for skills, with different levels, so we can be sure those are being shown correctly.</li>\n<li>Keen Hearing as a gift and Blurry Vision as a fault. </li>\n</ul>\n<p>Then dump the whole pile onto our test actor, Major Dee Minor, and we should be ready to go.</p>\n<h2 id=\"letsmakeafudgeactor\">Let's make a FUDGE actor!</h2>\n<p>Finally we're getting into JavaScript - ready for the big anti-climax?</p>\n<div style=\"background-color:#444444;color:#BBBBBB\"><pre><code>/**\n * Extend the base Actor class to implement additional system-specific logic.\n */\n export default class ActorFudge extends Actor {\n    // except we don't have any additional document-level logic yet\n    // ... but perhaps we will ...\n};\n</code></pre>\n</div>\n<p>While we're at it, we can do the same for items:</p>\n<div style=\"background-color:#444444;color:#BBBBBB\"><pre><code>//**\n * Extend the base Item class to implement additional system-specific logic.\n */\n export default class ItemFudge extends Item {\n    // except we don't have any additional document-level logic yet\n    // ... but perhaps we will ...\n };\n</code></pre>\n</div>\n<p>This is a huge non-event because the template already took care of most of our data.</p>\n<p>Getting FoundryVTT to know about and take interest in these classes is equally exciting. In fudge.mjs:</p>\n<div style=\"background-color:#444444;color:#BBBBBB\"><pre><code>import Actor5e from \"./documents/actor.mjs\";\nimport Item5e from \"./documents/item.mjs\";\nCONFIG.Actor.documentClass = Actor5e;\nCONFIG.Item.documentClass = Item5e;\n</code></pre>\n</div>\n<p>Yeah, that's it. Let's try it. Ctrl-R to restart the FoundryVTT client and a quick peek at the browser console shows:</p>\n<p><img src=\"/modules/dev-journeys/assets/now-using-docs.png\" title=\"Using our Document Classes\" /></p>\n<p>Yep! It's using our stuff. And, just as a hint, look at that <code>apps</code> object in <code>game.items</code>. <code>game.actors</code> has one, too. So does each item and each actor in the lists. </p>\n<p>That's where the sheets go for editing the items. So the list of items in the sidebar is an application on the game's collection of items, the list of actors on the sidebar is an application on the game's collection of actors. When we opened the actor and each of the items when setting them up, it used the application the base system supplied for an actor or an item. </p>\n<p>Right now, our ActorFudge is inheriting use of the default applications, but we will be creating our own application to edit the ActorFudge document we just created, a.k.a the character sheet we've been aiming for.</p>\n<h2 id=\"beholdacharactersheet\">Behold - a Character Sheet</h2>\n<p>The character sheet is going to connect what we see on the screen, created using handlebars, to our actor data, but we can start with the contents of the character sheet we already created, more or less as is, and then do substitutions.</p>\n<p>We will start, of course, with an inherited class that does nothing:</p>\n<div style=\"background-color:#444444;color:#BBBBBB\"><pre><code>/**\n * Extend the base ActorSheet class to implement our character sheet.\n */\n export default class ActorSheetFudgeMajor extends ActorSheet {\n    // we don't have any additional logic yet ... but we will ...\n};\n</code></pre> \n</div>\n<p>and we register it by putting the following into <code>fudge.mjs</code></p>\n<div style=\"background-color:#444444;color:#BBBBBB\"><pre><code>import ActorSheetFudgeMajor from 'applications/major.mjs';\n\nHooks.once(\"init\", function() {\n  Actors.unregisterSheet(\"core\", ActorSheet);\n  Actors.registerSheet(\"fudge\", ActorSheetFudgeMajor, {\n    types: [\"major\"],\n    makeDefault: true,\n    label: \"FUDGE.SheetClassCharacter\"\n  });\n}\n</code></pre>\n</div>\n<p>And, now that we are getting into things buried in code that users can see, we will have to start filling in translations. It will be a lot easier to keep track of by doing it as we go than trying to scour the code and handlebars to do it after the fact. So, in <code>en.json</code>:</p>\n<div style=\"background-color:#444444;color:#BBBBBB\"><pre><code>{\n    \"FUDGE.SheetClassCharacter\": \"Default FUDGE Character Sheet\"\n}\n</code></pre>\n</div>\n<p>As you might guess, this is a big exercise of doing nothing, so far. It will inherit and it will use the base class for everything.</p>\n<p>Sure enough, it works. I had to log out of the game and log back in for it to execute that Hooks.once(\"init\") thing. Once I did, though, the actor is using our new sheet, which just defaults to the sheet it inherits from.</p>\n<p><img src=\"/modules/dev-journeys/assets/now-using-sheet.png\" title=\"Using our Sheet Class\" /></p>\n<p>You can see the new sheet in the <code>Actors(0).value.apps</code>.</p>\n<p>Also, if you open the actor and click on \"Sheet\" in the title bar of the dialog, it will show you what it is using for sheets.</p>\n<p><img src=\"/modules/dev-journeys/assets/default-old-sheet.png\" title=\"Using Old Sheet\" /></p>\n<p>It appears that, since the actor was created using the system default sheet, it still is, but we can see that our sheet is now the default for this system. We can and should switch the actor to use it, so opening the actor will display our changes as we fill it in. Select the new sheet and click save. (Of course, at present, it won't look any different when you do so, but that will improve.)</p>\n<h2 id=\"gettingtemplatesinvolved\">Getting Templates Involved</h2>\n<p>Remember that character sheet we built way at the beginning? It's time we brought that into play. I've carved the form out of the surrounding HTML and placed it in <code>templates/major-actor.hbs</code>. Then I added the following to <code>module/applications/actors/major-actor.mjs</code>:</p>\n<div style=\"background-color:#444444;color:#BBBBBB\"><pre><code>    get template() {\n        return `systems/fudge/templates/major-actor.hbs`;\n    }\n</code></pre>\n</div>\n<p>That's all! Hitting ^R, when I open the actor, I see the static character sheet we created at the start of this exercise. It has the original static data and completely ignores the properties of the actor, but that's okay. It's now in a place where we can massage it into what we need.</p>\n<p>Let's do something busy and simple, to get a feel for how handlebars work. Let's localize all the labels, etc. Here's what's involved.</p>\n<p>In the major-actor.hbs file, use a localize helper:</p>\n<div style=\"background-color:#444444;color:#BBBBBB\"><pre><code>&lt;label&gt;{{ localize 'FUDGE.CharacterName' }}\n  &lt;input name=\"charname\" id=\"charname\" type=\"text\" value=\"My Character\" placeholder=\"My Character\"/&gt;\n&lt;/label&gt;\n</code></pre>\n</div>\n<p>In the translations, add the definition:</p>\n<div style=\"background-color:#444444;color:#BBBBBB\"><pre><code>    \"FUDGE.CharacterName\": \"Character Name\",\n</code></pre>\n</div>\n<p>Lather, rinse, repeat, and everything should look the same when you're done as it did when you started. </p>\n<p>We can also tune up a couple of things. We can use the font-awesome icons supplied with FoundryVTT that will let our edit and delete buttons look like all the other systems. </p>\n<div style=\"background-color:#444444;color:#BBBBBB\"><pre><code>&lt;button id=\"f1-x\" class=\"edit-button\" title=\"Edit\" type=\"button\"&gt;\n  &lt;i class=\"fas fa-edit\"&gt;&lt;/i&gt;\n&lt;/button&gt;\n&lt;button id=\"f1-x\" class=\"delete-button\" title=\"Delete\" type=\"button\"&gt;\n  &lt;i class=\"fas fa-trash\"&gt;&lt;/i&gt;\n&lt;/button&gt;\n</code></pre>\n</div>\n<p>A few nips and tucks to the CSS and it looks about the way we want it:</p>\n<p><img src=\"/modules/dev-journeys/assets/prepared-sheet.png\" title=\"Prepared Sheet\" /></p>\n<p>Some data would, of course be nice. We can start small.</p>\n<div style=\"background-color:#444444;color:#BBBBBB\"><pre><code>&lt;input name=\"charname\" id=\"charname\" type=\"text\" \n  value=\"{{actor.name}}\" \n  placeholder=\"{{ localize 'FUDGE.CharacterName' }}\"/&gt;\n</code></pre>\n</div>\n<p>and then we can do the same for FP and EP.  </p>\n<div style=\"background-color:#444444;color:#BBBBBB\"><pre><code>&lt;input name=\"fp\" type=\"text\" \n  value=\"{{actor.system.fp}}\" \n  placeholder=\"{{ localize 'FUDGE.FP' }}\"/&gt;\n</code></pre>\n</div>\n<p>Note that <code>actor.system.fp</code> is system-specific, where <code>actor.name</code> is a core field of the actor. Now the top-level actor data is visible. You can't edit it, because we don't have any event handlers, but it is visible.</p>\n<p>The wounds, the trait values, and the traits aren't being drawn from the character itself yet. All of these involve enumerating over a list of things. For wounds, we need some notion of how many of each kind of wound should be shown. Then we need to check the right number of boxes for the number of wounds of that kind the user has.</p>\n<p>For more on what you can do with templates, take a look at the <a href=\"https://handlebarsjs.com/guide/\">Handlebars</a> documentation. The next steps will involve <code>{{#each}}</code> and <code>{{#if}}</code>.</p>\n<p>This sounds a little busy. I've done pretty well today, so I'll save that one for tomorrow.</p>",
        "markdown": "## Make sure you're right…\n\nHaving slept on yesterday's ideas, it occurred to me: It's tedious to create each attribute, none of which has much more than a name, but I'd only do it once. It's even more tedious to drag each attribute across, one at a time, as items, every time I build a character. And attributes always travel in sets. So do trait levels. You never really choose them individually. Skills, gifts, faults, gear - these things are chosen one by one.\n\nSo maybe we should consider making the *set* of attributes an item and declaring a rule that a character can only have a single set of attributes, that attribute sets are \"unique\" among a character's items.  This idea makes a lot of sense. The single property of an attribute set is a list of names.\n\nWe could consider doing the same with trait level sets. Even if we select them in system configuration, having attribute sets as named items is a useful way of carrying them into the game. Until then, we could apply them per character in a single drag, which isn't bad. But we can hardcode the set and defer that question for now.\n\n## ...then go ahead.\n\nIt looks like we're ready to start. We can adjust our `template.json`, define an attribute set, two gifts, two faults, two skills, and one piece of equipment of each type (armor, weapon, consumable, other), and drag them onto an actor, and we'll have something to work with. Let's get started.\n\nFirst the `template.json`:\n\n<div style=\"background-color:#444444; color: #BBBBBB\">\n```\n  \"Item\": {\n    \"types\": [\"traitlevelset\", \"attributeset\",\"skill\",\"gift\",\"fault\",\"equipment\"],\n    \"templates\": {},\n    \"traitlevelset\": {\n      \"levels\": [\n        {\n          \"name\": \"\",\n          \"value\": 0,\n          \"ep\": 0\n        }\n      ]\n    },\n    \"attributeset\": {\n      \"attributes\": [\n        {\n          \"name\": \"\",\n          \"level\": 0\n        }\n      ]\n    },\n    \"skill\": {\n      \"level\": 0,\n      \"group\": \"General\"\n    },\n    \"gift\": {\n    },\n    \"fault\": {\n    },\n    \"equipment\": {\n      \"odf\": 0,\n      \"ddf\": 0,\n      \"quantity\":0\n    }\n  }\n\n```\n</div>\n\nI removed the attributes pack from the system.json and from the systen. We may have a pack of game system attribute and level sets in the future, or those may be delivered by modules.\n\nRestarting the server, I reopened the world to make sure it is happy with what we've done. Server log clean, so it loaded. Hmmm.... We get errors in the browser log on load about the two attribute items we created and the actor that used them. They don't show up in the UI, though, so we can't delete them.\n\nIt's hard to delete what you can't see. It would have been smarter to delete them first before editing the `template.json`. We can try adding `attribute` back into the `template.json` and reload the world to clean those out.\n<div style=\"background-color:#444444; color: #BBBBBB\">\n```\n  \"Item\": {\n    \"types\": [\"attribute\", \"traitlevelset\", \"attributeset\",\"skill\",\"gift\",\"fault\",\"equipment\"],\n    \"templates\": {},\n    \"attribute\": {\n      \"level\": 0\n    },\n    . . .\n```\n</div>\nOkay, I had to restart the server, not just refresh the game, but that worked - mostly. I deleted the items before I removed them from the actors and removing them from the actors didn't work, so I removed the actors as well, since there was little enough in them. Now the game's all cleaned up, though, and I can update the `template.json` again to get rid of the `attribute` item for good.\n\nNow we can make some items that we'll actually keep. Let's set up our sample items and create an actor to hold them, so we'll have base sample data to work with. \n* A standard set of trait levels and a set of attributes from Carnivore Games (Now Playing, The Unexplained) should do for those. \n* A switchblade, a pocketful of pens, a leather jacket, and a lighter should do for gear. The blade and the jacket will have damage factors, and there will be a dozen pens. \n* Street Fighting and Diplomacy for skills, with different levels, so we can be sure those are being shown correctly.\n* Keen Hearing as a gift and Blurry Vision as a fault. \n\nThen dump the whole pile onto our test actor, Major Dee Minor, and we should be ready to go.\n\n\n## Let's make a FUDGE actor!\n\nFinally we're getting into JavaScript - ready for the big anti-climax?\n\n<div style=\"background-color:#444444; color: #BBBBBB\">\n```\n/**\n * Extend the base Actor class to implement additional system-specific logic.\n */\n export default class ActorFudge extends Actor {\n    // except we don't have any additional document-level logic yet\n    // ... but perhaps we will ...\n};\n```\n</div>\nWhile we're at it, we can do the same for items:\n<div style=\"background-color:#444444; color: #BBBBBB\">\n```\n//**\n * Extend the base Item class to implement additional system-specific logic.\n */\n export default class ItemFudge extends Item {\n    // except we don't have any additional document-level logic yet\n    // ... but perhaps we will ...\n };\n```\n</div>\nThis is a huge non-event because the template already took care of most of our data.\n\nGetting FoundryVTT to know about and take interest in these classes is equally exciting. In fudge.mjs:\n<div style=\"background-color:#444444; color: #BBBBBB\">\n```\nimport Actor5e from \"./documents/actor.mjs\";\nimport Item5e from \"./documents/item.mjs\";\nCONFIG.Actor.documentClass = Actor5e;\nCONFIG.Item.documentClass = Item5e;\n```\n</div>\nYeah, that's it. Let's try it. Ctrl-R to restart the FoundryVTT client and a quick peek at the browser console shows:\n\n![Using Our Document Classes](/modules/dev-journeys/assets/now-using-docs.png \"Using our Document Classes\" )\n\nYep! It's using our stuff. And, just as a hint, look at that `apps` object in `game.items`. `game.actors` has one, too. So does each item and each actor in the lists. \n\nThat's where the sheets go for editing the items. So the list of items in the sidebar is an application on the game's collection of items, the list of actors on the sidebar is an application on the game's collection of actors. When we opened the actor and each of the items when setting them up, it used the application the base system supplied for an actor or an item. \n\nRight now, our ActorFudge is inheriting use of the default applications, but we will be creating our own application to edit the ActorFudge document we just created, a.k.a the character sheet we've been aiming for.\n\n## Behold - a Character Sheet\n\nThe character sheet is going to connect what we see on the screen, created using handlebars, to our actor data, but we can start with the contents of the character sheet we already created, more or less as is, and then do substitutions.\n\nWe will start, of course, with an inherited class that does nothing:\n<div style=\"background-color:#444444; color: #BBBBBB\">\n```\n/**\n * Extend the base ActorSheet class to implement our character sheet.\n */\n export default class ActorSheetFudgeMajor extends ActorSheet {\n    // we don't have any additional logic yet ... but we will ...\n};\n``` \n</div>\n\nand we register it by putting the following into `fudge.mjs`\n\n<div style=\"background-color:#444444; color: #BBBBBB\">\n```\nimport ActorSheetFudgeMajor from 'applications/major.mjs';\n\nHooks.once(\"init\", function() {\n  Actors.unregisterSheet(\"core\", ActorSheet);\n  Actors.registerSheet(\"fudge\", ActorSheetFudgeMajor, {\n    types: [\"major\"],\n    makeDefault: true,\n    label: \"FUDGE.SheetClassCharacter\"\n  });\n}\n```\n</div>\n\nAnd, now that we are getting into things buried in code that users can see, we will have to start filling in translations. It will be a lot easier to keep track of by doing it as we go than trying to scour the code and handlebars to do it after the fact. So, in `en.json`:\n\n<div style=\"background-color:#444444; color: #BBBBBB\">\n```\n{\n    \"FUDGE.SheetClassCharacter\": \"Default FUDGE Character Sheet\"\n}\n```\n</div>\n\nAs you might guess, this is a big exercise of doing nothing, so far. It will inherit and it will use the base class for everything.\n\nSure enough, it works. I had to log out of the game and log back in for it to execute that Hooks.once(\"init\") thing. Once I did, though, the actor is using our new sheet, which just defaults to the sheet it inherits from.\n\n![Using Our Sheet Class](/modules/dev-journeys/assets/now-using-sheet.png \"Using our Sheet Class\")\n\nYou can see the new sheet in the `Actors(0).value.apps`.\n\nAlso, if you open the actor and click on \"Sheet\" in the title bar of the dialog, it will show you what it is using for sheets.\n\n![Using Old Sheet](/modules/dev-journeys/assets/default-old-sheet.png \"Using Old Sheet\")\n\nIt appears that, since the actor was created using the system default sheet, it still is, but we can see that our sheet is now the default for this system. We can and should switch the actor to use it, so opening the actor will display our changes as we fill it in. Select the new sheet and click save. (Of course, at present, it won't look any different when you do so, but that will improve.)\n\n## Getting Templates Involved\n\nRemember that character sheet we built way at the beginning? It's time we brought that into play. I've carved the form out of the surrounding HTML and placed it in `templates/major-actor.hbs`. Then I added the following to `module/applications/actors/major-actor.mjs`:\n<div style=\"background-color:#444444; color: #BBBBBB\">\n```\n    get template() {\n        return `systems/fudge/templates/major-actor.hbs`;\n    }\n```\n</div>\n\nThat's all! Hitting ^R, when I open the actor, I see the static character sheet we created at the start of this exercise. It has the original static data and completely ignores the properties of the actor, but that's okay. It's now in a place where we can massage it into what we need.\n\nLet's do something busy and simple, to get a feel for how handlebars work. Let's localize all the labels, etc. Here's what's involved.\n\nIn the major-actor.hbs file, use a localize helper:\n<div style=\"background-color:#444444; color: #BBBBBB\">\n```\n<label>{{ localize 'FUDGE.CharacterName' }}\n  <input name=\"charname\" id=\"charname\" type=\"text\" value=\"My Character\" placeholder=\"My Character\"/>\n</label>\n```\n</div>\n\nIn the translations, add the definition:\n<div style=\"background-color:#444444; color: #BBBBBB\">\n```\n    \"FUDGE.CharacterName\": \"Character Name\",\n```\n</div>\n\nLather, rinse, repeat, and everything should look the same when you're done as it did when you started. \n\nWe can also tune up a couple of things. We can use the font-awesome icons supplied with FoundryVTT that will let our edit and delete buttons look like all the other systems. \n<div style=\"background-color:#444444; color: #BBBBBB\">\n```\n<button id=\"f1-x\" class=\"edit-button\" title=\"Edit\" type=\"button\">\n  <i class=\"fas fa-edit\"></i>\n</button>\n<button id=\"f1-x\" class=\"delete-button\" title=\"Delete\" type=\"button\">\n  <i class=\"fas fa-trash\"></i>\n</button>\n```\n</div>\nA few nips and tucks to the CSS and it looks about the way we want it:\n\n![PreparedSheet](/modules/dev-journeys/assets/prepared-sheet.png \"Prepared Sheet\")\n\nSome data would, of course be nice. We can start small.\n\n<div style=\"background-color:#444444; color: #BBBBBB\">\n```\n<input name=\"charname\" id=\"charname\" type=\"text\" \n  value=\"{{actor.name}}\" \n  placeholder=\"{{ localize 'FUDGE.CharacterName' }}\"/>\n```\n</div>\nand then we can do the same for FP and EP.  \n<div style=\"background-color:#444444; color: #BBBBBB\">\n```\n<input name=\"fp\" type=\"text\" \n  value=\"{{actor.system.fp}}\" \n  placeholder=\"{{ localize 'FUDGE.FP' }}\"/>\n```\n</div>\nNote that `actor.system.fp` is system-specific, where `actor.name` is a core field of the actor. Now the top-level actor data is visible. You can't edit it, because we don't have any event handlers, but it is visible.\n\nThe wounds, the trait values, and the traits aren't being drawn from the character itself yet. All of these involve enumerating over a list of things. For wounds, we need some notion of how many of each kind of wound should be shown. Then we need to check the right number of boxes for the number of wounds of that kind the user has.\n\nFor more on what you can do with templates, take a look at the [Handlebars](https://handlebarsjs.com/guide/) documentation. The next steps will involve `{{#each}}` and `{{#if}}`.\n\nThis sounds a little busy. I've done pretty well today, so I'll save that one for tomorrow."
      },
      "video": {
        "controls": true,
        "volume": 0.5
      },
      "src": null,
      "system": {},
      "sort": 600000,
      "ownership": {
        "default": -1
      },
      "flags": {
        "core": {
          "sheetClass": "core.MarkdownJournalPageSheet"
        }
      }
    },
    {
      "name": "September 16, 2022:  Traits",
      "type": "text",
      "_id": "0fGkasxQZTjgNrAP",
      "title": {
        "show": true,
        "level": 1
      },
      "image": {},
      "text": {
        "format": 2,
        "content": "<p>A couple of days to work some other issues, including moving all of this from my desktop to GitHub so I can split the work between my desktop and the laptop that arrived two days ago (so exciting!). I may make a separate side-journey on how I set up the work environment.</p>\n<p>So this morning I'm back to the character sheet. It turns out that most of the traits are surprisingly easy. The data passed to the character sheet has an `actor` property, which has a `skills` enumeration. </p>\n<h2 id=\"theeasystuff\">The Easy Stuff</h2>\n<p>For gifts and faults, we can replace the contents of the traitlist we used on our static character sheet:</p>\n<div style=\"background-color:#222222;color:#CCCCCC\"><pre><code>&lt;div class=\"traitlist\"&gt;\n  {{#each actor.items as |item|}}\n    {{#if (eq item.type \"fault\")}}\n      &lt;div class=\"nonlevel-item\"&gt;{{item.name}}&lt;/div&gt;\n      &lt;button type=\"button\" class=\"delete-button\" title=\"Delete\"\n        id=\"del-{{item.id}}\" \n      &gt;\n        &lt;i class=\"fas fa-trash\"&gt;&lt;/i&gt;\n      &lt;/button&gt;\n    {{/if}}\n  {{/each}}\n&lt;/div&gt;\n</code></pre>\n</div>\n<p>Equipment has more content but isn't any harder:</p>\n<div style=\"background-color:#222222;color:#CCCCCC\"><pre><code>&lt;div class=\"eqlist\"&gt;\n  &lt;div class=\"eqtitle\"&gt;Item&lt;/div&gt;\n  &lt;div class=\"eqtitle\"&gt;DF&lt;/div&gt;\n  &lt;div class=\"eqtitle\"&gt;&lt;/div&gt;\n  {{#each actor.items as |item|}}\n    {{#if (eq item.type \"equipment\")}}\n      &lt;div class=\"eqname\"&gt;{{item.name}}&lt;/div&gt;\n      &lt;div class=\"df\"&gt;\n        {{#if item.system.odf}}O+{{item.system.odf}}{{/if}}\n        {{#if item.system.ddf}}D+{{item.system.ddf}}{{/if}}\n      &lt;/div&gt;\n      &lt;button type=\"button\" class=\"delete-button\" title=\"Delete\" \n        id=\"del-{{item.id}}\" \n      &gt;\n       &lt;i class=\"fas fa-trash\"&gt;&lt;/i&gt;\n      &lt;/button&gt;\n    {{/if}}\n  {{/each}}\n&lt;/div&gt;\n</code></pre>\n</div>\n<p>The table of trait levels takes a little more work, but can be done:</p>\n<div style=\"background-color:#222222;color:#CCCCCC\"><pre><code>&lt;tbody&gt;\n  {{#each actor.items as |item|}}\n    {{#if (eq item.type \"traitlevelset\")}}\n      {{#each item.system.levels as |level|}}\n        &lt;tr&gt;\n          &lt;td&gt;{{level.name}}&lt;/td&gt;\n          &lt;td&gt;{{level.value}}&lt;/td&gt;\n          &lt;td&gt;{{level.ep}}&lt;/td&gt;\n        &lt;/tr&gt;\n      {{/each}}\n    {{/if}}\n  {{/each}}\n&lt;/tbody&gt;\n</code></pre>\n</div>\n<p>Here, we had to use two levels of <code>{{#each}}</code> because the item provide a property containing an array of trait levels. We'd like to have the displayed values formatted with + on positive values, but otherwise, it's picture-perfect. </p>\n<p>We can do something similar for attributes and skills, but going that deep, we run into limitations of the handlebars. We can use a handlebars <em>partial</em> to provide a trait level selection UI object, but for now, we can provide a select with no options, just to get everything visible into place.</p>\n<p>Here's what it looks like for attributes. Attributes are also delivered as an <code>attributeset</code> item, with an <code>attributes</code> property, which is also a list, so this has two levels of each, as the <code>traitlevelset</code> above did:</p>\n<div style=\"background-color:#222222;color:#CCCCCC\"><pre><code>&lt;div class=\"levellist\"&gt;\n  {{#each actor.items as |item|}}\n    {{#if (eq item.type \"attributeset\")}}\n      {{#each item.system.attributes as |attribute idx|}}\n        &lt;div&gt;\n          &lt;label for=\"attr-{{idx}}\"&gt;{{attribute.name}}&lt;/label&gt;\n          &lt;select id=\"attr-{{idx}}\" name=\"attr-{{idx}}\"&gt;\n              {{! We need something to deliver the trait levels}}\n          &lt;/select&gt;\n        &lt;/div&gt;\n      {{/each}}\n    {{/if}}\n  {{/each}}\n&lt;/div&gt;\n</code></pre>\n</div>\n<p>Skills have more content, but the nesting is simpler, since each skill is an item:</p>\n<div style=\"background-color:#222222;color:#CCCCCC\"><pre><code>&lt;div class=\"levellist levellist--dl\"&gt;\n  {{#each actor.items as |item|}}\n    {{#if (eq item.type \"skill\")}}\n      &lt;label for=\"sel-{{item.id}}\"&gt;{{item.name}}&lt;/label&gt;\n      &lt;select id=\"sel-{{item.id}}\" name=\"sel-{{item.id}}\"&gt;\n        {{! We need something to deliver the trait levels}}\n      &lt;/select&gt;\n      &lt;button class=\"edit-button\" title=\"Edit\" type=\"button\"\n        id=\"edit-{{item.id}}\" \n      &gt;&lt;i class=\"fas fa-edit\"&gt;&lt;/i&gt;&lt;/button&gt;\n      &lt;button class=\"delete-button\" title=\"Delete\" type=\"button\"\n        id=\"del-{{item.id}}\" &gt;&lt;i class=\"fas fa-trash\"&gt;&lt;/i&gt;&lt;/button&gt;\n    {{/if}}\n  {{/each}}\n&lt;/div&gt;\n</code></pre>\n</div>\n<p>Now, when we render the sheet, all of our data is coming from our actor. Two important pieces are missing:</p>\n<ul>\n<li>The trait levels for attributes and skills and which is selected)</li>\n<li>The number of wound boxes and which ones are filled.</li>\n</ul>\n<p>To tackle these, we're going to use three techniques:</p>\n<ul>\n<li>Context data (provided by overriding <code>getData()</code>) to prepare the wound and trait levels and let the template do less work.</li>\n<li>Helpers to correlate the wound boxes and wound count.</li>\n</ul>\n<h2 id=\"traitlevelsandgetdata\">Trait Levels and getData</h2>\n<p>Let's start with the context data for trait levels. A character is only going to have one set of traitlevels. It would be really useful if we had a traitlevels array. Then we could use a simple each on it.</p>\n<p>All of the data you have been accessing in the template so far has come from something called the \"context\", which is returned from the getData method. So far, we have gotten pretty good mileage using the getData the sheet inherited from ActorSheet. Now we're going to override it to add a few fields of our own.</p>\n<div style=\"background-color:#222222;color:#CCCCCC\"><pre><code>getData(options) {\n    const context = super.getData(options);\n    context.traitlevels = [];\n    for (const item of context.actor.items) {\n      if (item.type === \"traitlevelset\") {\n        context.traitlevels = item.system.levels;\n        break;\n      }\n    }\n    return context;\n  }\n</code></pre>\n</div>\n<p>The first line ensures that we don't lose any of the good stuff we're already using. The rest creates a <code>traitlevels</code> we can refer to that contains the array of trait levles.</p>\n<p>We can immediately use this to replace our searching the items for the traitlevelset in the trait level table at the top of the sheet:</p>\n<div style=\"background-color:#222222;color:#CCCCCC\"><pre><code>&lt;tbody&gt;\n  {{#each traitlevels as |level|}}\n    &lt;tr&gt;\n      &lt;td&gt;{{level.name}}&lt;/td&gt;\n      &lt;td&gt;{{level.value}}&lt;/td&gt;\n      &lt;td&gt;{{level.ep}}&lt;/td&gt;\n    &lt;/tr&gt;\n  {{/each}}\n&lt;/tbody&gt;\n</code></pre>\n</div>\n<p>Very succinct. The code to provide the selects for the trait levels for attributes and skills also becomes more tractable.</p>\n<div style=\"background-color:#222222;color:#CCCCCC\"><pre><code>&lt;label for=\"sel-{{item.id}}\"&gt;{{item.name}}&lt;/label&gt;\n&lt;select id=\"sel-{{item.id}}\" name=\"sel-{{item.id}}\"&gt;\n  {{#each ../traitlevels as |level|}}\n    &lt;option value=\"{{level.value}}\"\n      {{#if (eq item.system.level level.value)}} selected {{/if}}\n    &gt;{{level.name}}&lt;/option&gt;\n  {{/each}}\n&lt;/select&gt;\n</code></pre>\n</div>\n<p>This is a pretty good payback for ten lines of context-generation code. </p>\n<p>The use of <code>../traitlevels</code> requires a little explanation. Each time you use <code>{{each}}</code>, the references in the code within it form a new context. If you want to use a value from the context that surrounds the <code>{{each}}</code> block, you need to use \"<code>../</code>\" to access it. In the attributes section, we're actually three deep in them and need to use \"<code>../../</code>\". </p>\n<p>If you're in doubt about which context the data you want lives in, you can use a <code>{{log}}</code> tag just above the element you're going to use it in to find out experimentally. <code>{{log foo ../foo ../../foo}}</code> When your code runs, the browser console log will show you a line showing all three values and you can see which one holds the data you expect. (Usually, unless you're reusing a name, the others are undefined.)</p>\n<h2 id=\"woundlevels\">Wound levels</h2>\n<p>We will take a similar approach to wound levels, adding enough information to the context to ensure that showing it on the character sheet is easy.</p>\n<p>The actor has a number of wound levels of each type. In addition, each type of wound has a wound capacity, the number of boxes available to check. If you've filled all the boxes at one level, damage overflows into the next box, with increasingly dire consequences, so a character can eventually be killed by a sufficient number of paper cuts. </p>\n<p>In the default scenario, the capacities are constant, with three scratches and one of each other type. In some FUDGE-based systems, one attribute or another may be used to set the capacities. We're not going to set that up now, but we should set up in anticipation of it eventually being needed.</p>\n<p>The following approach guarantees that the number of wounds set stay bounded by the set of boxes to show. The names used here match the names in the actor's wounds data set up in <code>template.json</code>.</p>\n<div style=\"background-color:#222222;color:#CCCCCC\"><pre><code>getData(options) {\n    const context = super.getData(options);\n    . . .\n    context.woundlevels = {\n      scratch: [false, false, false],\n      hurt: [false],\n      veryhurt: [false],\n      incapacitated: [false],\n      neardeath: [false]\n    };\n    for (const level in context.actor.system.wounds) {\n      if ({}.hasOwnProperty.call(context.actor.system.wounds, level)) {\n        for (let box = 0; \n             box &lt; context.woundlevels[level].length; \n             box += 1) {\n          context.woundlevels[level][box] = \n             box &lt; context.actor.system.wounds[level];\n        }\n      }\n    }\n</code></pre>\n</div>\n<p>Because of the way we've set it up, the data on what to show and what to check is readily available to the template. For each wound level:</p>\n<div style=\"background-color:#222222;color:#CCCCCC\"><pre><code>&lt;div class=\"level\"&gt;\n  &lt;div&gt;1-2&lt;/div&gt;\n  &lt;div class=\"checks\"&gt;\n    {{#each woundlevels.scratch as | box |}}\n      &lt;input type=\"checkbox\" {{#if box}}checked{{/if}}&gt;\n    {{/each}}\n  &lt;/div&gt;\n  &lt;div&gt;{{ localize \"FUDGE.Scratch\" }}&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n</div>\n<h2 id=\"ahelperfornumericdisplay\">A helper for numeric display</h2>\n<p>One last thing to add. We have a couple of places where we would prefer to have an explicit <code>+</code> sign show when displaying a positive number. We faked it out for the damage factors, but we should really do it right, and we'd like to do it in the trait level table. </p>\n<p>A natural solution for this is a helper. We can set up the helper to be available from startup in <code>fudge.mjs</code>:</p>\n<div style=\"background-color:#222222;color:#CCCCCC\"><pre><code>const displayWithSign = function(num) {\n  return num &gt; 0 ? `+${num}` : num.toString();\n};\nHooks.once(\"init\", function() {\n  . . .\nHandlebars.registerHelper({displayWithSign});\n  . . .\n});\n</code></pre>\n</div>\n<p>Then, to use it in the handlebars:</p>\n<div style=\"background-color:#222222;color:#CCCCCC\"><pre><code>{{#each traitlevels as |level|}}\n  &lt;tr&gt;\n    &lt;td&gt;{{level.name}}&lt;/td&gt;\n    &lt;td&gt;{{displayWithSign level.value}}&lt;/td&gt;\n    &lt;td&gt;{{level.ep}}&lt;/td&gt;\n  &lt;/tr&gt;\n{{/each}}\n. . .\n{{#each actor.items as |item|}}\n  {{#if (eq item.type \"equipment\")}}\n    &lt;div class=\"eqname\"&gt;{{item.name}}&lt;/div&gt;\n    &lt;div class=\"df\"&gt;\n      {{#if item.system.odf}}\n        O{{displayWithSign item.system.odf}}\n      {{/if}}\n      {{#if item.system.ddf}}\n        D{{displayWithSign item.system.ddf}}\n      {{/if}}\n    &lt;/div&gt;\n    &lt;button class=\"delete-button\" title=\"Delete\" type=\"button\"\n       id=\"del-{{item.id}}\" &gt;&lt;i class=\"fas fa-trash\"&gt;&lt;/i&gt;&lt;/button&gt;\n  {{/if}}\n{{/each}}\n</code></pre>\n</div>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>We now have our actor's current data completely displaying in the character sheet. The first leg of this journey is complete. In the next leg, we need to add the various event handlers so that the user can edit the character data - first everything that can be directly edited from the sheet, then anything (if such there be…) that will require a popup dialog to edit. But we've traveled far enough for today. Time to go do some other things for a while…</p>",
        "markdown": "A couple of days to work some other issues, including moving all of this from my desktop to GitHub so I can split the work between my desktop and the laptop that arrived two days ago (so exciting!). I may make a separate side-journey on how I set up the work environment.\n\nSo this morning I'm back to the character sheet. It turns out that most of the traits are surprisingly easy. The data passed to the character sheet has an \\`actor\\` property, which has a \\`skills\\` enumeration. \n\n## The Easy Stuff\n\nFor gifts and faults, we can replace the contents of the traitlist we used on our static character sheet:\n<div style=\"background-color:#222222; color: #CCCCCC\">\n```\n<div class=\"traitlist\">\n  {{#each actor.items as |item|}}\n    {{#if (eq item.type \"fault\")}}\n      <div class=\"nonlevel-item\">{{item.name}}</div>\n      <button type=\"button\" class=\"delete-button\" title=\"Delete\"\n        id=\"del-{{item.id}}\" \n      >\n        <i class=\"fas fa-trash\"></i>\n      </button>\n    {{/if}}\n  {{/each}}\n</div>\n```\n</div>\nEquipment has more content but isn't any harder:\n<div style=\"background-color:#222222; color: #CCCCCC\">\n```\n<div class=\"eqlist\">\n  <div class=\"eqtitle\">Item</div>\n  <div class=\"eqtitle\">DF</div>\n  <div class=\"eqtitle\"></div>\n  {{#each actor.items as |item|}}\n    {{#if (eq item.type \"equipment\")}}\n      <div class=\"eqname\">{{item.name}}</div>\n      <div class=\"df\">\n        {{#if item.system.odf}}O+{{item.system.odf}}{{/if}}\n        {{#if item.system.ddf}}D+{{item.system.ddf}}{{/if}}\n      </div>\n      <button type=\"button\" class=\"delete-button\" title=\"Delete\" \n        id=\"del-{{item.id}}\" \n      >\n       <i class=\"fas fa-trash\"></i>\n      </button>\n    {{/if}}\n  {{/each}}\n</div>\n```\n</div>\n\nThe table of trait levels takes a little more work, but can be done:\n\n<div style=\"background-color:#222222; color: #CCCCCC\">\n```\n<tbody>\n  {{#each actor.items as |item|}}\n    {{#if (eq item.type \"traitlevelset\")}}\n      {{#each item.system.levels as |level|}}\n        <tr>\n          <td>{{level.name}}</td>\n          <td>{{level.value}}</td>\n          <td>{{level.ep}}</td>\n        </tr>\n      {{/each}}\n    {{/if}}\n  {{/each}}\n</tbody>\n```\n</div>\nHere, we had to use two levels of `{{#each}}` because the item provide a property containing an array of trait levels. We'd like to have the displayed values formatted with + on positive values, but otherwise, it's picture-perfect. \n\nWe can do something similar for attributes and skills, but going that deep, we run into limitations of the handlebars. We can use a handlebars *partial* to provide a trait level selection UI object, but for now, we can provide a select with no options, just to get everything visible into place.\n\nHere's what it looks like for attributes. Attributes are also delivered as an `attributeset` item, with an `attributes` property, which is also a list, so this has two levels of each, as the `traitlevelset` above did:\n\n<div style=\"background-color:#222222; color: #CCCCCC\">\n```\n<div class=\"levellist\">\n  {{#each actor.items as |item|}}\n    {{#if (eq item.type \"attributeset\")}}\n      {{#each item.system.attributes as |attribute idx|}}\n        <div>\n          <label for=\"attr-{{idx}}\">{{attribute.name}}</label>\n          <select id=\"attr-{{idx}}\" name=\"attr-{{idx}}\">\n              {{! We need something to deliver the trait levels}}\n          </select>\n        </div>\n      {{/each}}\n    {{/if}}\n  {{/each}}\n</div>\n```\n</div>\n\nSkills have more content, but the nesting is simpler, since each skill is an item:\n<div style=\"background-color:#222222; color: #CCCCCC\">\n```\n<div class=\"levellist levellist--dl\">\n  {{#each actor.items as |item|}}\n    {{#if (eq item.type \"skill\")}}\n      <label for=\"sel-{{item.id}}\">{{item.name}}</label>\n      <select id=\"sel-{{item.id}}\" name=\"sel-{{item.id}}\">\n        {{! We need something to deliver the trait levels}}\n      </select>\n      <button class=\"edit-button\" title=\"Edit\" type=\"button\"\n        id=\"edit-{{item.id}}\" \n      ><i class=\"fas fa-edit\"></i></button>\n      <button class=\"delete-button\" title=\"Delete\" type=\"button\"\n        id=\"del-{{item.id}}\" ><i class=\"fas fa-trash\"></i></button>\n    {{/if}}\n  {{/each}}\n</div>\n```\n</div>\n\nNow, when we render the sheet, all of our data is coming from our actor. Two important pieces are missing:\n* The trait levels for attributes and skills and which is selected)\n* The number of wound boxes and which ones are filled.\n\nTo tackle these, we're going to use three techniques:\n* Context data (provided by overriding `getData()`) to prepare the wound and trait levels and let the template do less work.\n* Helpers to correlate the wound boxes and wound count.\n\n## Trait Levels and getData\n\nLet's start with the context data for trait levels. A character is only going to have one set of traitlevels. It would be really useful if we had a traitlevels array. Then we could use a simple each on it.\n\nAll of the data you have been accessing in the template so far has come from something called the \"context\", which is returned from the getData method. So far, we have gotten pretty good mileage using the getData the sheet inherited from ActorSheet. Now we're going to override it to add a few fields of our own.\n\n<div style=\"background-color:#222222; color: #CCCCCC\">\n```\ngetData(options) {\n    const context = super.getData(options);\n    context.traitlevels = [];\n    for (const item of context.actor.items) {\n      if (item.type === \"traitlevelset\") {\n        context.traitlevels = item.system.levels;\n        break;\n      }\n    }\n    return context;\n  }\n```\n</div>\n\nThe first line ensures that we don't lose any of the good stuff we're already using. The rest creates a `traitlevels` we can refer to that contains the array of trait levles.\n\nWe can immediately use this to replace our searching the items for the traitlevelset in the trait level table at the top of the sheet:\n<div style=\"background-color:#222222; color: #CCCCCC\">\n```\n<tbody>\n  {{#each traitlevels as |level|}}\n    <tr>\n      <td>{{level.name}}</td>\n      <td>{{level.value}}</td>\n      <td>{{level.ep}}</td>\n    </tr>\n  {{/each}}\n</tbody>\n```\n</div>\nVery succinct. The code to provide the selects for the trait levels for attributes and skills also becomes more tractable.\n\n<div style=\"background-color:#222222; color: #CCCCCC\">\n```\n<label for=\"sel-{{item.id}}\">{{item.name}}</label>\n<select id=\"sel-{{item.id}}\" name=\"sel-{{item.id}}\">\n  {{#each ../traitlevels as |level|}}\n    <option value=\"{{level.value}}\"\n      {{#if (eq item.system.level level.value)}} selected {{/if}}\n    >{{level.name}}</option>\n  {{/each}}\n</select>\n```\n</div>\n\nThis is a pretty good payback for ten lines of context-generation code. \n\nThe use of `../traitlevels` requires a little explanation. Each time you use `{{each}}`, the references in the code within it form a new context. If you want to use a value from the context that surrounds the `{{each}}` block, you need to use \"`../`\" to access it. In the attributes section, we're actually three deep in them and need to use \"`../../`\". \n\nIf you're in doubt about which context the data you want lives in, you can use a `{{log}}` tag just above the element you're going to use it in to find out experimentally. `{{log foo ../foo ../../foo}}` When your code runs, the browser console log will show you a line showing all three values and you can see which one holds the data you expect. (Usually, unless you're reusing a name, the others are undefined.)\n\n## Wound levels\n\nWe will take a similar approach to wound levels, adding enough information to the context to ensure that showing it on the character sheet is easy.\n\nThe actor has a number of wound levels of each type. In addition, each type of wound has a wound capacity, the number of boxes available to check. If you've filled all the boxes at one level, damage overflows into the next box, with increasingly dire consequences, so a character can eventually be killed by a sufficient number of paper cuts. \n\nIn the default scenario, the capacities are constant, with three scratches and one of each other type. In some FUDGE-based systems, one attribute or another may be used to set the capacities. We're not going to set that up now, but we should set up in anticipation of it eventually being needed.\n\nThe following approach guarantees that the number of wounds set stay bounded by the set of boxes to show. The names used here match the names in the actor's wounds data set up in `template.json`.\n\n<div style=\"background-color:#222222; color: #CCCCCC\">\n```\ngetData(options) {\n    const context = super.getData(options);\n    . . .\n    context.woundlevels = {\n      scratch: [false, false, false],\n      hurt: [false],\n      veryhurt: [false],\n      incapacitated: [false],\n      neardeath: [false]\n    };\n    for (const level in context.actor.system.wounds) {\n      if ({}.hasOwnProperty.call(context.actor.system.wounds, level)) {\n        for (let box = 0; \n             box < context.woundlevels[level].length; \n             box += 1) {\n          context.woundlevels[level][box] = \n             box < context.actor.system.wounds[level];\n        }\n      }\n    }\n```\n</div>\n\nBecause of the way we've set it up, the data on what to show and what to check is readily available to the template. For each wound level:\n\n<div style=\"background-color:#222222; color: #CCCCCC\">\n```\n<div class=\"level\">\n  <div>1-2</div>\n  <div class=\"checks\">\n    {{#each woundlevels.scratch as | box |}}\n      <input type=\"checkbox\" {{#if box}}checked{{/if}}>\n    {{/each}}\n  </div>\n  <div>{{ localize \"FUDGE.Scratch\" }}</div>\n</div>\n```\n</div>\n\n## A helper for numeric display\n\nOne last thing to add. We have a couple of places where we would prefer to have an explicit `+` sign show when displaying a positive number. We faked it out for the damage factors, but we should really do it right, and we'd like to do it in the trait level table. \n\nA natural solution for this is a helper. We can set up the helper to be available from startup in `fudge.mjs`:\n\n<div style=\"background-color:#222222; color: #CCCCCC\">\n```\nconst displayWithSign = function(num) {\n  return num > 0 ? `+${num}` : num.toString();\n};\nHooks.once(\"init\", function() {\n  . . .\nHandlebars.registerHelper({displayWithSign});\n  . . .\n});\n```\n</div>\n\nThen, to use it in the handlebars:\n<div style=\"background-color:#222222; color: #CCCCCC\">\n```\n{{#each traitlevels as |level|}}\n  <tr>\n    <td>{{level.name}}</td>\n    <td>{{displayWithSign level.value}}</td>\n    <td>{{level.ep}}</td>\n  </tr>\n{{/each}}\n. . .\n{{#each actor.items as |item|}}\n  {{#if (eq item.type \"equipment\")}}\n    <div class=\"eqname\">{{item.name}}</div>\n    <div class=\"df\">\n      {{#if item.system.odf}}\n        O{{displayWithSign item.system.odf}}\n      {{/if}}\n      {{#if item.system.ddf}}\n        D{{displayWithSign item.system.ddf}}\n      {{/if}}\n    </div>\n    <button class=\"delete-button\" title=\"Delete\" type=\"button\"\n       id=\"del-{{item.id}}\" ><i class=\"fas fa-trash\"></i></button>\n  {{/if}}\n{{/each}}\n```\n</div>\n\n## Conclusion\n\nWe now have our actor's current data completely displaying in the character sheet. The first leg of this journey is complete. In the next leg, we need to add the various event handlers so that the user can edit the character data - first everything that can be directly edited from the sheet, then anything (if such there be...) that will require a popup dialog to edit. But we've traveled far enough for today. Time to go do some other things for a while..."
      },
      "video": {
        "controls": true,
        "volume": 0.5
      },
      "src": null,
      "system": {},
      "sort": 700000,
      "ownership": {
        "default": -1
      },
      "flags": {
        "core": {
          "sheetClass": "core.MarkdownJournalPageSheet"
        }
      }
    }
  ],
  "flags": {
    "exportSource": {
      "world": "fudge-journeys",
      "system": "fudge",
      "coreVersion": "10.285",
      "systemVersion": "1.0.0"
    },
    "core": {
      "sourceId": "JournalEntry.iXAczIDvZCXvGnQ2"
    }
  },
  "_stats": {
    "systemId": "fudge",
    "systemVersion": "1.0.0",
    "coreVersion": "10.285",
    "createdTime": 1659661297286,
    "modifiedTime": 1663371662057,
    "lastModifiedBy": "BTl0cPfh6E6EXtBD"
  }
}